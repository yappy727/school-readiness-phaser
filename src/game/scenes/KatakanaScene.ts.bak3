import Phaser from 'phaser';

export default class KatakanaScene extends Phaser.Scene {
  private background!: Phaser.GameObjects.Graphics;
  private currentWord: any = null;
  private wordDisplay!: Phaser.GameObjects.Text;
  private illustrationDisplay!: Phaser.GameObjects.Graphics;
  private options: Phaser.GameObjects.Container[] = [];
  private katakanaWords: any[] = [];
  private remainingWords: any[] = []; // 未出題の単語リスト
  private completedWords: any[] = []; // 正解済みの単語リスト
  private totalWords: number = 0; // 全単語数
  private selectedLevel: string = 'all'; // 選択されたレベル（行）
  private showingLevelSelect: boolean = true; // レベル選択画面表示中かどうか
  private isProcessingAnswer: boolean = false; // 回答処理中かどうか
  private levelButtons: Phaser.GameObjects.Container[] = [];
  private hintButton!: Phaser.GameObjects.Container; // ヒントボタン
  private hintContainer?: Phaser.GameObjects.Container; // ヒント表示用コンテナ
  private isShowingHint: boolean = false; // ヒント表示中かどうか
  private scoreText!: Phaser.GameObjects.Text;
  
  constructor() {
    super({ key: 'KatakanaScene' });
  }

  // Phaserで曲線を近似するヘルパーメソッド
  private drawCurve(startX: number, startY: number, controlX: number, controlY: number, endX: number, endY: number): void {
    // 二次ベジェ曲線を線分で近似
    const segments = 8;
    let prevX = startX;
    let prevY = startY;
    
    for (let i = 1; i <= segments; i++) {
      const t = i / segments;
      const t2 = t * t;
      const x = (1 - t) * (1 - t) * startX + 2 * (1 - t) * t * controlX + t2 * endX;
      const y = (1 - t) * (1 - t) * startY + 2 * (1 - t) * t * controlY + t2 * endY;
      this.illustrationDisplay.lineTo(x, y);
      prevX = x;
      prevY = y;
    }
  }

  create(): void {
    this.createBackground();
    this.createHeader();
    this.initializeWordData();
    this.createBackButton();
    this.showLevelSelection();
  }

  private createBackground(): void {
    // 海のグラデーション背景
    this.background = this.add.graphics();
    this.background.fillGradientStyle(0xa8edea, 0xa8edea, 0xfed6e3, 0xfed6e3);
    this.background.fillRect(0, 0, this.cameras.main.width, this.cameras.main.height);
  }

  private createHeader(): void {
    const headerText = this.showingLevelSelect ? 'どの行をえらびますか？' : 'カタカナをまなぼう';
    const header = this.add.text(
      this.cameras.main.centerX,
      50,
      headerText,
      {
        fontSize: '32px',
        fontFamily: 'Arial',
        color: '#ffffff',
        stroke: '#8b5cf6',
        strokeThickness: 3
      }
    );
    header.setOrigin(0.5);

    if (!this.showingLevelSelect) {
      // ゲーム中のみ残り問題数表示
      this.scoreText = this.add.text(
        this.cameras.main.width - 20,
        20,
        `残り: --問`,
        {
          fontSize: '18px',
          fontFamily: 'Arial',
          color: '#ffffff',
          backgroundColor: '#8b5cf6',
          padding: { x: 10, y: 5 }
        }
      );
      this.scoreText.setOrigin(1, 0);
    }
  }

  private initializeWordData(): void {
    // カタカナ外来語データベース（子供に親しみやすい単語を中心に）
    this.katakanaWords = [
      // ア行
      { word: 'アイス', pattern: '○イス', answer: 'ア', row: 'a', illustration: 'ice' },
      { word: 'インク', pattern: '○ンク', answer: 'イ', row: 'a', illustration: 'ink' },
      { word: 'ウール', pattern: '○ール', answer: 'ウ', row: 'a', illustration: 'wool' },
      { word: 'エプロン', pattern: '○プロン', answer: 'エ', row: 'a', illustration: 'apron' },
      { word: 'オレンジ', pattern: '○レンジ', answer: 'オ', row: 'a', illustration: 'orange' },
      
      // カ行
      { word: 'カメラ', pattern: '○メラ', answer: 'カ', row: 'ka', illustration: 'camera' },
      { word: 'キーボード', pattern: '○ーボード', answer: 'キ', row: 'ka', illustration: 'keyboard' },
      { word: 'クッキー', pattern: '○ッキー', answer: 'ク', row: 'ka', illustration: 'cookie' },
      { word: 'ケーキ', pattern: '○ーキ', answer: 'ケ', row: 'ka', illustration: 'cake' },
      { word: 'コーヒー', pattern: '○ーヒー', answer: 'コ', row: 'ka', illustration: 'coffee' },
      
      // サ行
      { word: 'サッカー', pattern: '○ッカー', answer: 'サ', row: 'sa', illustration: 'soccer' },
      { word: 'シャツ', pattern: '○ャツ', answer: 'シ', row: 'sa', illustration: 'shirt' },
      { word: 'スープ', pattern: '○ープ', answer: 'ス', row: 'sa', illustration: 'soup' },
      { word: 'セーター', pattern: '○ーター', answer: 'セ', row: 'sa', illustration: 'sweater' },
      { word: 'ソファー', pattern: '○ファー', answer: 'ソ', row: 'sa', illustration: 'sofa' },
      
      // タ行
      { word: 'タオル', pattern: '○オル', answer: 'タ', row: 'ta', illustration: 'towel' },
      { word: 'チーズ', pattern: '○ーズ', answer: 'チ', row: 'ta', illustration: 'cheese' },
      { word: 'ツアー', pattern: '○アー', answer: 'ツ', row: 'ta', illustration: 'tour' },
      { word: 'テーブル', pattern: '○ーブル', answer: 'テ', row: 'ta', illustration: 'table' },
      { word: 'トマト', pattern: '○マト', answer: 'ト', row: 'ta', illustration: 'tomato' },
      
      // ナ行
      { word: 'ナイフ', pattern: '○イフ', answer: 'ナ', row: 'na', illustration: 'knife' },
      { word: 'ニュース', pattern: '○ュース', answer: 'ニ', row: 'na', illustration: 'news' },
      { word: 'ヌードル', pattern: '○ードル', answer: 'ヌ', row: 'na', illustration: 'noodle' },
      { word: 'ネックレス', pattern: '○ックレス', answer: 'ネ', row: 'na', illustration: 'necklace' },
      { word: 'ノート', pattern: '○ート', answer: 'ノ', row: 'na', illustration: 'notebook' },
      
      // ハ行
      { word: 'ハンバーガー', pattern: '○ンバーガー', answer: 'ハ', row: 'ha', illustration: 'hamburger' },
      { word: 'ピアノ', pattern: '○アノ', answer: 'ピ', row: 'ha', illustration: 'piano' },
      { word: 'プール', pattern: '○ール', answer: 'プ', row: 'ha', illustration: 'pool' },
      { word: 'ペン', pattern: '○ン', answer: 'ペ', row: 'ha', illustration: 'pen' },
      { word: 'ポケット', pattern: '○ケット', answer: 'ポ', row: 'ha', illustration: 'pocket' },
      
      // マ行
      { word: 'マウス', pattern: '○ウス', answer: 'マ', row: 'ma', illustration: 'mouse' },
      { word: 'ミルク', pattern: '○ルク', answer: 'ミ', row: 'ma', illustration: 'milk' },
      { word: 'ムービー', pattern: '○ービー', answer: 'ム', row: 'ma', illustration: 'movie' },
      { word: 'メロン', pattern: '○ロン', answer: 'メ', row: 'ma', illustration: 'melon' },
      { word: 'モニター', pattern: '○ニター', answer: 'モ', row: 'ma', illustration: 'monitor' },
      
      // ヤ行
      { word: 'ヨーグルト', pattern: '○ーグルト', answer: 'ヨ', row: 'ya', illustration: 'yogurt' },
      { word: 'ユニフォーム', pattern: '○ニフォーム', answer: 'ユ', row: 'ya', illustration: 'uniform' },
      
      // ラ行
      { word: 'ライト', pattern: '○イト', answer: 'ラ', row: 'ra', illustration: 'light' },
      { word: 'リモコン', pattern: '○モコン', answer: 'リ', row: 'ra', illustration: 'remote' },
      { word: 'ルール', pattern: '○ール', answer: 'ル', row: 'ra', illustration: 'rule' },
      { word: 'レモン', pattern: '○モン', answer: 'レ', row: 'ra', illustration: 'lemon' },
      { word: 'ロボット', pattern: '○ボット', answer: 'ロ', row: 'ra', illustration: 'robot' },
      
      // ワ行
      { word: 'ワイン', pattern: '○イン', answer: 'ワ', row: 'wa', illustration: 'wine' },
      { word: 'ワンピース', pattern: '○ンピース', answer: 'ワ', row: 'wa', illustration: 'dress' }
    ];
  }

  private initializeGameState(): void {
    // 選択されたレベルの単語をフィルタリング
    if (this.selectedLevel === 'all') {
      this.remainingWords = [...this.katakanaWords];
    } else {
      this.remainingWords = this.katakanaWords.filter(word => word.row === this.selectedLevel);
    }
    
    this.completedWords = [];
    this.totalWords = this.remainingWords.length;
    
    // 単語リストをシャッフル
    this.remainingWords = this.remainingWords.sort(() => Math.random() - 0.5);
  }

  private createWordDisplay(): void {
    this.selectRandomWord();
    
    // 残り問題数を更新
    this.scoreText.setText(`残り: ${this.remainingWords.length}問`);
    
    // ゲーム完了チェック
    if (this.remainingWords.length === 0) {
      return;
    }
    
    // イラスト表示（高精度プログラム描画）
    this.illustrationDisplay = this.add.graphics();
    this.drawIllustration();
    
    // 単語表示（○ル形式）
    this.wordDisplay = this.add.text(
      this.cameras.main.centerX,
      250,
      this.currentWord.pattern,
      {
        fontSize: '48px',
        fontFamily: 'Arial',
        color: '#ffffff',
        stroke: '#8b5cf6',
        strokeThickness: 3
      }
    );
    this.wordDisplay.setOrigin(0.5);

    // 問題文
    const question = this.add.text(
      this.cameras.main.centerX,
      300,
      '○に入るカタカナはどれですか？',
      {
        fontSize: '24px',
        fontFamily: 'Arial',
        color: '#ffffff',
        backgroundColor: '#8b5cf6',
        padding: { x: 15, y: 8 }
      }
    );
    question.setOrigin(0.5);
    
    // 問題文がクリック可能になっていないことを確認（デバッグ用）
    // question.setInteractive(); // これがないことを確認

    // ページ開始時に正解の単語を読み上げ
    this.time.delayedCall(1000, () => {
      this.speakWord(this.currentWord.word);
    });

    // もう一度聞くボタンを追加
    this.createSpeakButton();
    
    // ヒントボタンを追加
    this.createHintButton();
  }

  private createOptionButtons(): void {
    if (!this.currentWord) return;
    
    const correctAnswer = this.currentWord.answer;
    const wrongOptions = this.generateWrongOptions(correctAnswer);
    const allOptions = [correctAnswer, ...wrongOptions];
    
    // オプションをシャッフル
    const shuffledOptions = allOptions.sort(() => Math.random() - 0.5);

    shuffledOptions.forEach((option, index) => {
      const x = (this.cameras.main.width / 5) * (index + 1);
      const y = 400;
      
      const button = this.createOptionButton(option, x, y, option === correctAnswer, index);
      this.options.push(button);
    });
  }

  private createOptionButton(text: string, x: number, y: number, isCorrect: boolean, index: number): Phaser.GameObjects.Container {
    const container = this.add.container(x, y);
    
    // ボタン背景
    const background = this.add.graphics();
    background.fillStyle(0x87ceeb);
    background.fillRoundedRect(-50, -35, 100, 70, 15);
    background.lineStyle(3, 0x4682b4);
    background.strokeRoundedRect(-50, -35, 100, 70, 15);
    
    // ボタンテキスト
    const buttonText = this.add.text(
      0,
      0,
      text,
      {
        fontSize: '32px',
        fontFamily: 'Arial',
        color: '#ffffff',
        stroke: '#000000',
        strokeThickness: 2
      }
    );
    buttonText.setOrigin(0.5);
    
    // コンテナに追加
    container.add([background, buttonText]);
    
    // インタラクティブ設定
    background.setInteractive(
      new Phaser.Geom.Rectangle(-50, -35, 100, 70),
      Phaser.Geom.Rectangle.Contains
    );
    
    background.on('pointerdown', () => {
      // 回答処理中は無視
      if (this.isProcessingAnswer) return;
      
      // ボタンクリック音を再生
      this.playButtonSound();
      
      // 答えの処理
      this.handleAnswer(isCorrect, container);
    });

    background.on('pointerover', () => {
      container.setScale(1.1);
    });

    background.on('pointerout', () => {
      container.setScale(1.0);
    });

    // 入場アニメーション
    container.setScale(0);
    this.tweens.add({
      targets: container,
      scaleX: 1,
      scaleY: 1,
      duration: 300,
      delay: index * 100,
      ease: 'Back.easeOut'
    });

    return container;
  }

  private handleAnswer(isCorrect: boolean, buttonContainer: Phaser.GameObjects.Container): void {
    // 回答処理開始
    this.isProcessingAnswer = true;
    
    // 全ボタンを無効化
    this.options.forEach(option => {
      option.list.forEach(child => {
        if (child instanceof Phaser.GameObjects.Graphics) {
          child.removeInteractive();
        }
      });
    });

    if (isCorrect) {
      this.handleCorrectAnswer(buttonContainer);
    } else {
      this.handleIncorrectAnswer(buttonContainer);
    }
  }

  private handleCorrectAnswer(buttonContainer: Phaser.GameObjects.Container): void {
    // 現在の単語を正解済みリストに追加し、未出題リストから削除
    this.completedWords.push(this.currentWord);
    this.remainingWords = this.remainingWords.filter(word => word !== this.currentWord);

    // 正解音を再生
    this.playSuccessSound();

    // 正解エフェクト
    const graphics = buttonContainer.list[0] as Phaser.GameObjects.Graphics;
    graphics.clear();
    graphics.fillStyle(0x22c55e);
    graphics.fillRoundedRect(-50, -35, 100, 70, 15);
    graphics.lineStyle(3, 0x16a34a);
    graphics.strokeRoundedRect(-50, -35, 100, 70, 15);

    // パーティクルエフェクト
    this.createSuccessParticles(buttonContainer.x, buttonContainer.y);

    // 全てクリアチェック
    if (this.remainingWords.length === 0) {
      // 全問正解
      this.time.delayedCall(1000, () => {
        this.showGameCompleteMessage();
      });
      return;
    }

    // 成功メッセージ
    const successMessage = this.add.text(
      this.cameras.main.centerX,
      this.cameras.main.centerY,
      'せいかい！',
      {
        fontSize: '48px',
        fontFamily: 'Arial',
        color: '#22c55e',
        stroke: '#ffffff',
        strokeThickness: 4
      }
    );
    successMessage.setOrigin(0.5);

    // 次の問題へ
    this.time.delayedCall(2000, () => {
      successMessage.destroy();
      this.nextQuestion();
    });
  }

  private handleIncorrectAnswer(buttonContainer: Phaser.GameObjects.Container): void {
    // 不正解音を再生
    this.playErrorSound();

    // 不正解エフェクト
    const graphics = buttonContainer.list[0] as Phaser.GameObjects.Graphics;
    graphics.clear();
    graphics.fillStyle(0xef4444);
    graphics.fillRoundedRect(-50, -35, 100, 70, 15);
    graphics.lineStyle(3, 0xdc2626);
    graphics.strokeRoundedRect(-50, -35, 100, 70, 15);

    // 振動エフェクト
    this.tweens.add({
      targets: buttonContainer,
      x: buttonContainer.x + 10,
      duration: 100,
      yoyo: true,
      repeat: 3,
      ease: 'Sine.easeInOut'
    });

    // 励ましメッセージ
    const encourageMessage = this.add.text(
      this.cameras.main.centerX,
      this.cameras.main.centerY,
      'もういちど！',
      {
        fontSize: '36px',
        fontFamily: 'Arial',
        color: '#ef4444',
        stroke: '#ffffff',
        strokeThickness: 3
      }
    );
    encourageMessage.setOrigin(0.5);

    // 不正解時は自動的にヒントを表示
    this.time.delayedCall(500, () => {
      this.showHint();
    });

    // 再挑戦（ヒント表示時間を考慮して遅らせる）
    this.time.delayedCall(11000, () => {  // 500ms（ヒント表示待ち） + 10000ms（ヒント表示時間） + 500ms（余裕）
      encourageMessage.destroy();
      // 回答処理終了
      this.isProcessingAnswer = false;
      this.resetButtons();
    });
  }

  private createSuccessParticles(x: number, y: number): void {
    // 簡易パーティクルエフェクト（円形）
    for (let i = 0; i < 8; i++) {
      const particle = this.add.graphics();
      particle.fillStyle(0xffd700);
      
      // シンプルな円形パーティクル
      particle.fillCircle(0, 0, 8);
      particle.setPosition(x, y);
      
      // ランダムな方向に飛ばす
      const angle = (Math.PI * 2 * i) / 8;
      const speed = 100 + Math.random() * 100;
      
      this.tweens.add({
        targets: particle,
        x: x + Math.cos(angle) * speed,
        y: y + Math.sin(angle) * speed,
        alpha: 0,
        scaleX: 0.2,
        scaleY: 0.2,
        duration: 1000,
        ease: 'Power2',
        onComplete: () => {
          particle.destroy();
        }
      });
    }
    
    // 円形に広がるリング
    const ring = this.add.graphics();
    ring.lineStyle(4, 0xffd700);
    ring.strokeCircle(x, y, 1);
    
    this.tweens.add({
      targets: ring,
      scaleX: 3,
      scaleY: 3,
      alpha: 0,
      duration: 800,
      ease: 'Power2',
      onComplete: () => {
        ring.destroy();
      }
    });
  }

  private resetButtons(): void {
    // ヒントコンテナを非表示にする
    this.hideHint();
    
    // ボタンをリセット
    this.options.forEach(option => option.destroy());
    this.options = [];
    this.createOptionButtons();
  }

  private nextQuestion(): void {
    this.selectRandomWord();
    
    // 全てクリアした場合は処理を終了
    if (this.remainingWords.length === 0) {
      return;
    }
    
    // 回答処理終了
    this.isProcessingAnswer = false;
    
    this.wordDisplay.setText(this.currentWord.pattern);
    // 新しいイラストを描画
    this.drawIllustration();
    this.resetButtons();
    
    // 新しい問題の正解単語を読み上げ
    this.time.delayedCall(1000, () => {
      this.speakWord(this.currentWord.word);
    });
  }

  private createSpeakButton(): void {
    // もう一度聞くボタン（高精度スピーカーアイコン）
    const speakButton = this.add.graphics();
    
    // ボタン背景（グラデーション風）
    speakButton.fillStyle(0x8b5cf6);
    speakButton.fillRoundedRect(0, 0, 60, 60, 10);
    speakButton.fillStyle(0xa78bfa);
    speakButton.fillRoundedRect(2, 2, 56, 56, 8);
    speakButton.lineStyle(2, 0xffffff);
    speakButton.strokeRoundedRect(0, 0, 60, 60, 10);
    
    // 高精度スピーカーアイコンを描画（ボタン内に完全に収まるように調整、左寄せ）
    const centerX = 25; // 左側に5px移動
    const centerY = 30;
    
    // スピーカー本体（より小さく）
    speakButton.fillStyle(0xffffff);
    speakButton.fillRect(centerX - 6, centerY - 5, 6, 10);
    
    // スピーカーコーン（より小さく、完全にボタン内に収まるサイズ）
    speakButton.beginPath();
    speakButton.moveTo(centerX, centerY - 6);
    speakButton.lineTo(centerX + 8, centerY - 9);
    speakButton.lineTo(centerX + 8, centerY + 9);
    speakButton.lineTo(centerX, centerY + 6);
    speakButton.closePath();
    speakButton.fillPath();
    
    // コーンの影（より小さく）
    speakButton.fillStyle(0xe5e7eb);
    speakButton.beginPath();
    speakButton.moveTo(centerX + 1, centerY - 4);
    speakButton.lineTo(centerX + 8, centerY - 7);
    speakButton.lineTo(centerX + 8, centerY + 7);
    speakButton.lineTo(centerX + 1, centerY + 4);
    speakButton.closePath();
    speakButton.fillPath();
    
    // 音波（完全にボタン内に収まるサイズ、より控えめに）
    speakButton.lineStyle(1.5, 0xffffff);
    // 第1音波（小さく）
    speakButton.beginPath();
    speakButton.arc(centerX + 10, centerY, 4, -Math.PI/4, Math.PI/4);
    speakButton.strokePath();
    // 第2音波（中くらい）
    speakButton.beginPath();
    speakButton.arc(centerX + 12, centerY, 7, -Math.PI/5, Math.PI/5);
    speakButton.strokePath();
    // 第3音波（大きく、でもボタン内に収まる）
    speakButton.beginPath();
    speakButton.arc(centerX + 14, centerY, 10, -Math.PI/6, Math.PI/6);
    speakButton.strokePath();
    
    // 選択肢ボタンの下（Y座標430付近）、中央左寄りに配置（ボタン間隔を広げる）
    speakButton.setPosition(this.cameras.main.centerX - 45, 480);
    
    speakButton.setInteractive(
      new Phaser.Geom.Rectangle(0, 0, 60, 60),
      Phaser.Geom.Rectangle.Contains
    );
    
    speakButton.on('pointerdown', () => {
      this.playButtonSound();
      this.speakWord(this.currentWord.word);
      
      // クリック時のエフェクト
      this.tweens.add({
        targets: speakButton,
        scaleX: 0.9,
        scaleY: 0.9,
        duration: 100,
        yoyo: true,
        ease: 'Power2'
      });
    });

    speakButton.on('pointerover', () => {
      speakButton.setScale(1.1);
      speakButton.setAlpha(0.9);
    });

    speakButton.on('pointerout', () => {
      speakButton.setScale(1.0);
      speakButton.setAlpha(1.0);
    });
  }

  private createHintButton(): void {
    // ヒントボタンコンテナ（スピーカーボタンと間隔を広げて配置）
    this.hintButton = this.add.container(this.cameras.main.centerX + 45, 480);
    
    // ヒントボタン背景
    const hintBg = this.add.graphics();
    hintBg.fillStyle(0x10b981);
    hintBg.fillRoundedRect(0, 0, 60, 60, 10);
    hintBg.fillStyle(0x34d399);
    hintBg.fillRoundedRect(2, 2, 56, 56, 8);
    hintBg.lineStyle(2, 0xffffff);
    hintBg.strokeRoundedRect(0, 0, 60, 60, 10);
    
    // ヒントアイコン（電球）
    const centerX = 30;
    const centerY = 30;
    
    // 電球本体
    hintBg.fillStyle(0xffffff);
    hintBg.fillCircle(centerX, centerY - 5, 12);
    
    // 電球の光線
    hintBg.lineStyle(2, 0xffc107);
    for (let i = 0; i < 8; i++) {
      const angle = (Math.PI * 2 * i) / 8;
      const startX = centerX + Math.cos(angle) * 16;
      const startY = centerY - 5 + Math.sin(angle) * 16;
      const endX = centerX + Math.cos(angle) * 20;
      const endY = centerY - 5 + Math.sin(angle) * 20;
      hintBg.lineBetween(startX, startY, endX, endY);
    }
    
    // 電球の口金
    hintBg.fillStyle(0x9e9e9e);
    hintBg.fillRect(centerX - 6, centerY + 7, 12, 8);
    hintBg.lineStyle(1, 0x757575);
    for (let i = 0; i < 3; i++) {
      hintBg.lineBetween(centerX - 6, centerY + 9 + i * 2, centerX + 6, centerY + 9 + i * 2);
    }
    
    // ヒントボタンにコンポーネントを追加
    this.hintButton.add(hintBg);
    
    // インタラクティブ設定
    hintBg.setInteractive(
      new Phaser.Geom.Rectangle(0, 0, 60, 60),
      Phaser.Geom.Rectangle.Contains
    );
    
    hintBg.on('pointerdown', () => {
      // 回答処理中またはヒント表示中は無視
      if (this.isProcessingAnswer || this.isShowingHint) return;
      
      this.playButtonSound();
      this.showHint();
      
      // クリック時のエフェクト
      this.tweens.add({
        targets: this.hintButton,
        scaleX: 0.9,
        scaleY: 0.9,
        duration: 100,
        yoyo: true,
        ease: 'Power2'
      });
    });
    
    hintBg.on('pointerover', () => {
      this.hintButton.setScale(1.1);
      this.hintButton.setAlpha(0.9);
    });
    
    hintBg.on('pointerout', () => {
      this.hintButton.setScale(1.0);
      this.hintButton.setAlpha(1.0);
    });
  }

  private showHint(): void {
    if (this.isShowingHint || !this.currentWord) return;
    
    this.isShowingHint = true;
    
    // 既存のヒントコンテナがあれば削除
    if (this.hintContainer) {
      this.hintContainer.destroy();
    }
    
    // ヒントコンテナ作成
    this.hintContainer = this.add.container(this.cameras.main.centerX, this.cameras.main.centerY - 50);
    
    // ヒント背景
    const hintBg = this.add.graphics();
    hintBg.fillStyle(0x000000, 0.8);
    hintBg.fillRoundedRect(-200, -60, 400, 120, 15);
    hintBg.lineStyle(3, 0xffc107);
    hintBg.strokeRoundedRect(-200, -60, 400, 120, 15);
    this.hintContainer.add(hintBg);
    
    // クリックで閉じるためのインタラクティブ設定
    hintBg.setInteractive(
      new Phaser.Geom.Rectangle(-200, -60, 400, 120),
      Phaser.Geom.Rectangle.Contains
    );
    
    hintBg.on('pointerdown', () => {
      this.hideHint();
    });
    
    // ヒントの内容を取得
    const row = this.getKatakanaRow(this.currentWord.answer);
    const rowChars = this.getRowCharacters(row);
    
    // ヒントテキスト
    const hintTexts: string[] = [];
    
    // 行の文字を表示
    const rowText = this.add.text(0, -30, rowChars.join('、'), {
      fontSize: '24px',
      fontFamily: 'Arial',
      color: '#ffffff'
    });
    rowText.setOrigin(0.5);
    this.hintContainer.add(rowText);
    hintTexts.push(rowChars.join('、'));
    
    // 正解文字の強調
    const answerHighlight = this.add.text(0, 0, `「${this.currentWord.answer}」`, {
      fontSize: '32px',
      fontFamily: 'Arial',
      color: '#ffc107',
      stroke: '#ffffff',
      strokeThickness: 2
    });
    answerHighlight.setOrigin(0.5);
    this.hintContainer.add(answerHighlight);
    hintTexts.push(`の、${this.currentWord.answer}`);
    
    // 単語のヒント
    const wordHint = this.add.text(0, 35, `${this.currentWord.word}の「${this.currentWord.answer}」`, {
      fontSize: '20px',
      fontFamily: 'Arial',
      color: '#90ee90'
    });
    wordHint.setOrigin(0.5);
    this.hintContainer.add(wordHint);
    hintTexts.push(`${this.currentWord.word}の、${this.currentWord.answer}`);
    
    // アニメーション
    this.hintContainer.setScale(0.8);
    this.hintContainer.setAlpha(0);
    
    this.tweens.add({
      targets: this.hintContainer,
      scale: 1,
      alpha: 1,
      duration: 300,
      ease: 'Back.easeOut'
    });
    
    // ヒントを読み上げる
    this.speakHint(hintTexts);
    
    // 10秒後に自動的にヒントを非表示
    const hintTimer = this.time.delayedCall(10000, () => {
      this.hideHint();
    });
    
    // ヒントタイマーを保存（クリック時にキャンセルするため）
    this.hintContainer.setData('timer', hintTimer);
  }
  
  private hideHint(): void {
    if (!this.hintContainer) return;
    
    // タイマーがあればキャンセル
    const timer = this.hintContainer.getData('timer');
    if (timer) {
      timer.remove();
    }
    
    this.tweens.add({
      targets: this.hintContainer,
      scale: 0.8,
      alpha: 0,
      duration: 300,
      ease: 'Back.easeIn',
      onComplete: () => {
        if (this.hintContainer) {
          this.hintContainer.destroy();
          this.hintContainer = undefined;
        }
        this.isShowingHint = false;
      }
    });
  }
  
  private getKatakanaRow(char: string): string {
    const rows: { [key: string]: string[] } = {
      'ア': ['ア', 'イ', 'ウ', 'エ', 'オ'],
      'カ': ['カ', 'キ', 'ク', 'ケ', 'コ'],
      'サ': ['サ', 'シ', 'ス', 'セ', 'ソ'],
      'タ': ['タ', 'チ', 'ツ', 'テ', 'ト'],
      'ナ': ['ナ', 'ニ', 'ヌ', 'ネ', 'ノ'],
      'ハ': ['ハ', 'ヒ', 'フ', 'ヘ', 'ホ'],
      'マ': ['マ', 'ミ', 'ム', 'メ', 'モ'],
      'ヤ': ['ヤ', 'ユ', 'ヨ'],
      'ラ': ['ラ', 'リ', 'ル', 'レ', 'ロ'],
      'ワ': ['ワ', 'ヲ', 'ン']
    };
    
    for (const row in rows) {
      if (rows[row].includes(char)) {
        return row;
      }
    }
    return 'ア';
  }
  
  private getRowCharacters(row: string): string[] {
    const rows: { [key: string]: string[] } = {
      'ア': ['ア', 'イ', 'ウ', 'エ', 'オ'],
      'カ': ['カ', 'キ', 'ク', 'ケ', 'コ'],
      'サ': ['サ', 'シ', 'ス', 'セ', 'ソ'],
      'タ': ['タ', 'チ', 'ツ', 'テ', 'ト'],
      'ナ': ['ナ', 'ニ', 'ヌ', 'ネ', 'ノ'],
      'ハ': ['ハ', 'ヒ', 'フ', 'ヘ', 'ホ'],
      'マ': ['マ', 'ミ', 'ム', 'メ', 'モ'],
      'ヤ': ['ヤ', 'ユ', 'ヨ'],
      'ラ': ['ラ', 'リ', 'ル', 'レ', 'ロ'],
      'ワ': ['ワ', 'ヲ', 'ン']
    };
    
    return rows[row] || ['ア', 'イ', 'ウ', 'エ', 'オ'];
  }
  
  private speakHint(texts: string[]): void {
    if ('speechSynthesis' in window) {
      // 前の音声をキャンセル
      window.speechSynthesis.cancel();
      
      const fullText = texts.join('、');
      const utterance = new SpeechSynthesisUtterance(fullText);
      utterance.lang = 'ja-JP';
      utterance.rate = 0.8;
      utterance.pitch = 1.0;
      utterance.volume = 1.0;
      
      window.speechSynthesis.speak(utterance);
    }
  }

  private createBackButton(): void {
    const backButton = this.add.text(
      30,
      30,
      '← もどる',
      {
        fontSize: '18px',
        fontFamily: 'Arial',
        color: '#ffffff',
        backgroundColor: '#8b5cf6',
        padding: { x: 10, y: 5 }
      }
    );
    backButton.setOrigin(0);
    backButton.setInteractive();
    backButton.on('pointerdown', () => {
      // 回答処理中は無視
      if (this.isProcessingAnswer) return;
      this.scene.start('MenuScene');
    });

    backButton.on('pointerover', () => {
      backButton.setScale(1.1);
    });

    backButton.on('pointerout', () => {
      backButton.setScale(1.0);
    });
  }

  private selectRandomWord(): void {
    if (this.remainingWords.length === 0) {
      this.showGameCompleteMessage();
      return;
    }
    
    // 未出題リストから最初の単語を取得
    this.currentWord = this.remainingWords[0];
  }

  private generateWrongOptions(correctAnswer: string): string[] {
    const allKatakana = ['ア', 'イ', 'ウ', 'エ', 'オ', 'カ', 'キ', 'ク', 'ケ', 'コ', 
                       'サ', 'シ', 'ス', 'セ', 'ソ', 'タ', 'チ', 'ツ', 'テ', 'ト',
                       'ナ', 'ニ', 'ヌ', 'ネ', 'ノ', 'ハ', 'ヒ', 'フ', 'ヘ', 'ホ',
                       'マ', 'ミ', 'ム', 'メ', 'モ', 'ヤ', 'ユ', 'ヨ', 'ラ', 'リ',
                       'ル', 'レ', 'ロ', 'ワ', 'ヲ', 'ン'];
    
    const wrongOptions = allKatakana.filter(char => char !== correctAnswer);
    
    // ランダムに3つ選択
    const shuffled = wrongOptions.sort(() => Math.random() - 0.5);
    return shuffled.slice(0, 3);
  }

  private speakWord(word: string): void {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(word);
      utterance.lang = 'ja-JP';
      utterance.rate = 0.8;
      utterance.pitch = 1.0;
      utterance.volume = 1.0;
      
      window.speechSynthesis.speak(utterance);
    } else {
      console.log('Speech synthesis not supported');
    }
  }

  private showGameCompleteMessage(): void {
    // 回答処理終了（クリア画面ではボタンが反応するように）
    this.isProcessingAnswer = false;
    
    // 全てのUI要素を削除
    this.children.removeAll();
    
    // 背景を再作成
    this.createBackground();
    
    // 祝福メッセージの背景
    const celebrationBg = this.add.graphics();
    celebrationBg.fillStyle(0xFFD700, 0.8);
    celebrationBg.fillRoundedRect(
      this.cameras.main.centerX - 200,
      this.cameras.main.centerY - 150,
      400,
      300,
      20
    );
    celebrationBg.lineStyle(5, 0xFF8C00);
    celebrationBg.strokeRoundedRect(
      this.cameras.main.centerX - 200,
      this.cameras.main.centerY - 150,
      400,
      300,
      20
    );

    // おめでとうメッセージ
    const congratsText = this.add.text(
      this.cameras.main.centerX,
      this.cameras.main.centerY - 80,
      'おめでとう！',
      {
        fontSize: '48px',
        fontFamily: 'Arial',
        color: '#8b5cf6',
        stroke: '#ffffff',
        strokeThickness: 4
      }
    );
    congratsText.setOrigin(0.5);

    // クリア情報
    const clearText = this.add.text(
      this.cameras.main.centerX,
      this.cameras.main.centerY - 20,
      'カタカナゲームクリア！',
      {
        fontSize: '28px',
        fontFamily: 'Arial',
        color: '#8b5cf6',
        stroke: '#ffffff',
        strokeThickness: 2
      }
    );
    clearText.setOrigin(0.5);

    // 完了した問題数を表示
    const scoreDisplay = this.add.text(
      this.cameras.main.centerX,
      this.cameras.main.centerY + 20,
      `${this.completedWords.length}問クリア！`,
      {
        fontSize: '24px',
        fontFamily: 'Arial',
        color: '#8b5cf6'
      }
    );
    scoreDisplay.setOrigin(0.5);

    // 祝福パーティクルを作成
    this.createCelebrationParticles();

    // ボタンエリア
    const rowButtonY = this.cameras.main.centerY + 60;
    const backButtonY = this.cameras.main.centerY + 110;

    // 行選択に戻るボタン
    const rowButton = this.add.text(
      this.cameras.main.centerX - 115,
      rowButtonY,
      '行せんたく',
      {
        fontSize: '20px',
        fontFamily: 'Arial',
        color: '#ffffff',
        backgroundColor: '#32CD32',
        padding: { x: 15, y: 8 }
      }
    );
    rowButton.setOrigin(0.5);
    rowButton.setInteractive();
    
    rowButton.on('pointerdown', () => {
      // 回答処理中は無視
      if (this.isProcessingAnswer) return;
      this.scene.restart();
    });
    
    rowButton.on('pointerover', () => {
      rowButton.setScale(1.1);
    });
    
    rowButton.on('pointerout', () => {
      rowButton.setScale(1.0);
    });
    
    // メニューに戻るボタン（位置を左に移動）
    const backButton = this.add.text(
      this.cameras.main.centerX + 95,
      backButtonY,
      'メニューにもどる',
      {
        fontSize: '20px',
        fontFamily: 'Arial',
        color: '#ffffff',
        backgroundColor: '#8b5cf6',
        padding: { x: 15, y: 8 }
      }
    );
    backButton.setOrigin(0.5);
    backButton.setInteractive();
    
    backButton.on('pointerdown', () => {
      // 回答処理中は無視
      if (this.isProcessingAnswer) return;
      this.scene.start('MenuScene');
    });
    
    backButton.on('pointerover', () => {
      backButton.setScale(1.1);
    });
    
    backButton.on('pointerout', () => {
      backButton.setScale(1.0);
    });
    
    // 祝福音声（選択された行に応じて変更）
    this.time.delayedCall(500, () => {
      const rowName = getRowDisplayName(this.selectedLevel);
      this.speakWord(`おめでとう！${rowName}クリアです！`);
    });
  }

  private createCelebrationParticles(): void {
    // 複数の祝福パーティクルを画面全体に散らす
    for (let i = 0; i < 20; i++) {
      const x = 100 + Math.random() * (this.cameras.main.width - 200);
      const y = 100 + Math.random() * (this.cameras.main.height - 200);
      
      // 星形パーティクル
      const star = this.add.graphics();
      star.fillStyle(0xFFD700);
      this.drawStar(star, 0, 0, 5, 10, 5);
      star.setPosition(x, y);
      
      // ランダムなアニメーション
      this.tweens.add({
        targets: star,
        rotation: Math.PI * 2,
        scaleX: 0.2 + Math.random() * 0.8,
        scaleY: 0.2 + Math.random() * 0.8,
        alpha: 0.3 + Math.random() * 0.7,
        duration: 2000 + Math.random() * 2000,
        repeat: -1,
        yoyo: true,
        ease: 'Sine.easeInOut'
      });
      
      // 落下アニメーション
      this.tweens.add({
        targets: star,
        y: y + 50 + Math.random() * 100,
        duration: 3000 + Math.random() * 2000,
        repeat: -1,
        yoyo: true,
        ease: 'Sine.easeInOut'
      });
    }
  }

  private drawStar(graphics: Phaser.GameObjects.Graphics, x: number, y: number, points: number, outer: number, inner: number): void {
    const angle = Math.PI / points;
    graphics.beginPath();
    graphics.moveTo(x, y - outer);
    
    for (let i = 0; i < points * 2; i++) {
      const radius = i % 2 === 0 ? outer : inner;
      const currentAngle = i * angle - Math.PI / 2;
      graphics.lineTo(
        x + Math.cos(currentAngle) * radius,
        y + Math.sin(currentAngle) * radius
      );
    }
    
    graphics.closePath();
    graphics.fillPath();
  }

  private showLevelSelection(): void {
    this.showingLevelSelect = true;
    
    // 行選択の説明
    const instruction = this.add.text(
      this.cameras.main.centerX,
      120,
      'どの行でちょうせんしますか？',
      {
        fontSize: '24px',
        fontFamily: 'Arial',
        color: '#ffffff',
        backgroundColor: '#8b5cf6',
        padding: { x: 15, y: 8 }
      }
    );
    instruction.setOrigin(0.5);

    // 行選択ボタンを作成
    this.createRowButtons();
  }

  private createRowButtons(): void {
    const rowData = [
      { row: 'a', text: 'ア行\n(アイウエオ)', color: 0xFF69B4, wordCount: 5 },
      { row: 'ka', text: 'カ行\n(カキクケコ)', color: 0x32CD32, wordCount: 5 },
      { row: 'sa', text: 'サ行\n(サシスセソ)', color: 0x1E90FF, wordCount: 5 },
      { row: 'ta', text: 'タ行\n(タチツテト)', color: 0xFF8C00, wordCount: 5 },
      { row: 'na', text: 'ナ行\n(ナニヌネノ)', color: 0x9370DB, wordCount: 5 },
      { row: 'ha', text: 'ハ行\n(ハヒフヘホ)', color: 0xFF1493, wordCount: 5 },
      { row: 'ma', text: 'マ行\n(マミムメモ)', color: 0x00CED1, wordCount: 5 },
      { row: 'ya', text: 'ヤ行\n(ヤユヨ)', color: 0xFFD700, wordCount: 2 },
      { row: 'ra', text: 'ラ行\n(ラリルレロ)', color: 0x98FB98, wordCount: 5 },
      { row: 'wa', text: 'ワ行\n(ワン)', color: 0xF0E68C, wordCount: 2 },
      { row: 'all', text: 'ぜんぶ\n(ア〜ン)', color: 0xFF4500, wordCount: 42 }
    ];

    // 行ボタンを配置（1〜3行目は4個ずつ、4行目は「ぜんぶ」ボタンのみ中央）
    const buttonsPerRow = 4;
    const buttonWidth = 140;
    const buttonSpacing = 10;
    const startY = 200;
    const rowSpacing = 100;

    rowData.forEach((data, index) => {
      let x: number;
      let y: number;
      
      if (index < 10) {
        // 最初の10個（ア行〜ワ行）は3行に配置
        const row = Math.floor(index / buttonsPerRow);
        const col = index % buttonsPerRow;
        
        // 3行目は2個のみなので中央寄せ
        if (row === 2) {
          const twoButtonsWidth = 2 * buttonWidth + buttonSpacing;
          const startX = this.cameras.main.centerX - twoButtonsWidth / 2 + buttonWidth / 2;
          x = startX + col * (buttonWidth + buttonSpacing);
        } else {
          const startX = this.cameras.main.centerX - (buttonsPerRow * buttonWidth + (buttonsPerRow - 1) * buttonSpacing) / 2 + buttonWidth / 2;
          x = startX + col * (buttonWidth + buttonSpacing);
        }
        
        y = startY + row * rowSpacing;
      } else {
        // 「ぜんぶ」ボタンは4行目の中央に配置
        x = this.cameras.main.centerX;
        y = startY + 3 * rowSpacing;
      }
      
      const container = this.createRowButton(data.row, data.text, x, y, data.color, data.wordCount);
      this.levelButtons.push(container);
    });
  }

  private createRowButton(row: string, text: string, x: number, y: number, color: number, wordCount: number): Phaser.GameObjects.Container {
    const container = this.add.container(x, y);
    
    // ボタン背景
    const background = this.add.graphics();
    background.fillStyle(color, 0.8);
    background.fillRoundedRect(-65, -35, 130, 70, 15);
    background.lineStyle(3, 0xffffff);
    background.strokeRoundedRect(-65, -35, 130, 70, 15);
    
    // ボタンテキスト
    const buttonText = this.add.text(0, -15, text, {
      fontSize: '16px',
      fontFamily: 'Arial',
      color: '#ffffff',
      align: 'center',
      stroke: '#000000',
      strokeThickness: 1
    });
    buttonText.setOrigin(0.5);
    
    // 問題数表示
    const countText = this.add.text(0, 15, `${wordCount}問`, {
      fontSize: '14px',
      fontFamily: 'Arial',
      color: '#ffffff',
      stroke: '#000000',
      strokeThickness: 1
    });
    countText.setOrigin(0.5);
    
    // コンテナに追加
    container.add([background, buttonText, countText]);
    
    // インタラクティブ設定
    background.setInteractive(
      new Phaser.Geom.Rectangle(-65, -35, 130, 70),
      Phaser.Geom.Rectangle.Contains
    );
    
    background.on('pointerdown', () => {
      // 回答処理中は無視
      if (this.isProcessingAnswer) return;
      this.selectRow(row);
    });

    background.on('pointerover', () => {
      container.setScale(1.05);
    });

    background.on('pointerout', () => {
      container.setScale(1.0);
    });

    // 入場アニメーション
    container.setScale(0);
    this.tweens.add({
      targets: container,
      scaleX: 1,
      scaleY: 1,
      duration: 500,
      delay: Math.random() * 500,
      ease: 'Back.easeOut'
    });

    return container;
  }

  private selectRow(row: string): void {
    this.selectedLevel = row;
    this.showingLevelSelect = false;
    
    // 行選択ボタンを明示的に削除
    this.levelButtons.forEach(button => button.destroy());
    this.levelButtons = [];
    
    // 行選択画面を削除
    this.children.removeAll();
    
    // ゲーム画面を構築
    this.createBackground();
    this.createHeader();
    this.initializeGameState();
    this.createWordDisplay();
    this.createOptionButtons();
    this.createBackButton();
  }

  // イラスト描画（高精度・要素数増加版）
  private drawIllustration(): void {
    if (!this.currentWord || !this.illustrationDisplay) return;
    
    this.illustrationDisplay.clear();
    this.illustrationDisplay.setPosition(this.cameras.main.centerX, 150);
    
    const type = this.currentWord.illustration;
    
    switch (type) {
      case 'ice':
        this.drawIce(0, 0);
        break;
      case 'ink':
        this.drawInk(0, 0);
        break;
      case 'wool':
        this.drawWool(0, 0);
        break;
      case 'apron':
        this.drawApron(0, 0);
        break;
      case 'orange':
        this.drawOrange(0, 0);
        break;
      case 'camera':
        this.drawCamera(0, 0);
        break;
      case 'keyboard':
        this.drawKeyboard(0, 0);
        break;
      case 'cookie':
        this.drawCookie(0, 0);
        break;
      case 'cake':
        this.drawCake(0, 0);
        break;
      case 'coffee':
        this.drawCoffee(0, 0);
        break;
      case 'soccer':
        this.drawSoccer(0, 0);
        break;
      case 'shirt':
        this.drawShirt(0, 0);
        break;
      case 'soup':
        this.drawSoup(0, 0);
        break;
      case 'sweater':
        this.drawSweater(0, 0);
        break;
      case 'sofa':
        this.drawSofa(0, 0);
        break;
      case 'towel':
        this.drawTowel(0, 0);
        break;
      case 'cheese':
        this.drawCheese(0, 0);
        break;
      case 'tour':
        this.drawTour(0, 0);
        break;
      case 'table':
        this.drawTable(0, 0);
        break;
      case 'tomato':
        this.drawTomato(0, 0);
        break;
      case 'knife':
        this.drawKnife(0, 0);
        break;
      case 'news':
        this.drawNews(0, 0);
        break;
      case 'noodle':
        this.drawNoodle(0, 0);
        break;
      case 'necklace':
        this.drawNecklace(0, 0);
        break;
      case 'notebook':
        this.drawNotebook(0, 0);
        break;
      case 'hamburger':
        this.drawHamburger(0, 0);
        break;
      case 'piano':
        this.drawPiano(0, 0);
        break;
      case 'pool':
        this.drawPool(0, 0);
        break;
      case 'pen':
        this.drawPen(0, 0);
        break;
      case 'pocket':
        this.drawPocket(0, 0);
        break;
      case 'mouse':
        this.drawMouse(0, 0);
        break;
      case 'milk':
        this.drawMilk(0, 0);
        break;
      case 'movie':
        this.drawMovie(0, 0);
        break;
      case 'melon':
        this.drawMelon(0, 0);
        break;
      case 'monitor':
        this.drawMonitor(0, 0);
        break;
      case 'yogurt':
        this.drawYogurt(0, 0);
        break;
      case 'uniform':
        this.drawUniform(0, 0);
        break;
      case 'light':
        this.drawLight(0, 0);
        break;
      case 'remote':
        this.drawRemote(0, 0);
        break;
      case 'rule':
        this.drawRule(0, 0);
        break;
      case 'lemon':
        this.drawLemon(0, 0);
        break;
      case 'robot':
        this.drawRobot(0, 0);
        break;
      case 'wine':
        this.drawWine(0, 0);
        break;
      case 'dress':
        this.drawDress(0, 0);
        break;
      default:
        // デフォルトイラスト
        this.illustrationDisplay.fillStyle(0x87ceeb);
        this.illustrationDisplay.fillCircle(0, 0, 30);
        break;
    }
  }

  // 以下、各イラスト描画メソッド（高精度・要素数増加版）
  
  private drawIce(x: number, y: number): void {
    // アイスクリーム（詳細版）
    
    // コーン（ワッフル模様付き）
    this.illustrationDisplay.fillStyle(0xDEB887);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x - 15, y + 10);
    this.illustrationDisplay.lineTo(x + 15, y + 10);
    this.illustrationDisplay.lineTo(x, y + 40);
    this.illustrationDisplay.closePath();
    this.illustrationDisplay.fillPath();
    
    // ワッフル模様
    this.illustrationDisplay.lineStyle(2, 0xCD853F);
    for (let i = 0; i < 4; i++) {
      this.illustrationDisplay.lineBetween(x - 10 + i * 5, y + 15, x - 5 + i * 5, y + 35);
      this.illustrationDisplay.lineBetween(x - 15 + i * 7, y + 12 + i * 5, x + 15 - i * 7, y + 12 + i * 5);
    }
    
    // アイスクリーム本体（3段重ね）
    // 下段（ストロベリー）
    this.illustrationDisplay.fillStyle(0xFF69B4);
    this.illustrationDisplay.fillCircle(x, y + 5, 18);
    
    // 中段（バニラ）
    this.illustrationDisplay.fillStyle(0xFFFACD);
    this.illustrationDisplay.fillCircle(x - 3, y - 10, 16);
    
    // 上段（チョコ）
    this.illustrationDisplay.fillStyle(0xD2691E);
    this.illustrationDisplay.fillCircle(x + 2, y - 25, 14);
    
    // チェリー
    this.illustrationDisplay.fillStyle(0xFF0000);
    this.illustrationDisplay.fillCircle(x + 8, y - 35, 4);
    
    // チェリーの茎
    this.illustrationDisplay.lineStyle(2, 0x228B22);
    this.illustrationDisplay.lineBetween(x + 8, y - 39, x + 10, y - 45);
    
    // 光沢効果
    this.illustrationDisplay.fillStyle(0xFFFFFF, 0.6);
    this.illustrationDisplay.fillCircle(x - 8, y - 20, 3);
    this.illustrationDisplay.fillCircle(x - 5, y, 2);
    this.illustrationDisplay.fillCircle(x + 5, y - 30, 2);
  }

  private drawInk(x: number, y: number): void {
    // インク瓶（詳細版）
    
    // 瓶の本体（ガラス）
    this.illustrationDisplay.fillStyle(0x87CEEB, 0.8);
    this.illustrationDisplay.fillRoundedRect(x - 15, y - 10, 30, 35, 5);
    
    // 瓶の底部（厚み）
    this.illustrationDisplay.fillStyle(0x4682B4, 0.6);
    this.illustrationDisplay.fillRoundedRect(x - 15, y + 20, 30, 5, 2);
    
    // インク（黒）
    this.illustrationDisplay.fillStyle(0x000000);
    this.illustrationDisplay.fillRoundedRect(x - 12, y - 5, 24, 25, 3);
    
    // インクの表面（反射）
    this.illustrationDisplay.fillStyle(0x333333);
    this.illustrationDisplay.fillEllipse(x, y - 5, 20, 4);
    
    // 瓶の口
    this.illustrationDisplay.fillStyle(0x696969);
    this.illustrationDisplay.fillRoundedRect(x - 8, y - 25, 16, 15, 2);
    
    // キャップ
    this.illustrationDisplay.fillStyle(0x2F4F4F);
    this.illustrationDisplay.fillRoundedRect(x - 10, y - 35, 20, 10, 3);
    
    // キャップの装飾
    this.illustrationDisplay.lineStyle(1, 0x708090);
    for (let i = 0; i < 3; i++) {
      this.illustrationDisplay.lineBetween(x - 8 + i * 5, y - 32, x - 6 + i * 5, y - 28);
    }
    
    // ラベル
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillRoundedRect(x - 8, y + 5, 16, 8, 1);
    
    // ラベルのテキスト（INK）
    this.illustrationDisplay.fillStyle(0x000000);
    this.illustrationDisplay.fillRect(x - 6, y + 7, 2, 4);
    this.illustrationDisplay.fillRect(x - 2, y + 7, 4, 1);
    this.illustrationDisplay.fillRect(x - 2, y + 10, 4, 1);
    this.illustrationDisplay.fillRect(x + 4, y + 7, 2, 4);
    
    // ガラスの反射効果
    this.illustrationDisplay.lineStyle(2, 0xFFFFFF, 0.7);
    this.illustrationDisplay.lineBetween(x - 10, y - 5, x - 10, y + 15);
    
    // インクの波紋
    this.illustrationDisplay.lineStyle(1, 0x444444, 0.5);
    this.illustrationDisplay.strokeEllipse(x, y - 3, 15, 2);
    this.illustrationDisplay.strokeEllipse(x + 2, y - 1, 10, 1);
  }

  private drawWool(x: number, y: number): void {
    // ウール（毛糸玉）（詳細版）
    
    // 毛糸玉の本体
    this.illustrationDisplay.fillStyle(0xDDA0DD);
    this.illustrationDisplay.fillCircle(x, y, 25);
    
    // 毛糸の巻き模様（複数の線）
    this.illustrationDisplay.lineStyle(3, 0xBA55D3);
    
    // 水平の巻き
    for (let i = 0; i < 5; i++) {
      const yPos = y - 20 + i * 10;
      this.illustrationDisplay.beginPath();
      this.illustrationDisplay.arc(x, yPos, 20 - Math.abs(yPos - y) * 0.5, 0, Math.PI);
      this.illustrationDisplay.strokePath();
    }
    
    // 斜めの巻き
    this.illustrationDisplay.lineStyle(2, 0x9370DB);
    for (let i = 0; i < 3; i++) {
      this.illustrationDisplay.beginPath();
      this.illustrationDisplay.arc(x, y, 22 - i * 3, Math.PI * 0.3 + i * 0.4, Math.PI * 1.7 + i * 0.4);
      this.illustrationDisplay.strokePath();
    }
    
    // 垂直の巻き
    this.illustrationDisplay.lineStyle(2, 0x8A2BE2);
    for (let i = 0; i < 4; i++) {
      const xPos = x - 15 + i * 10;
      this.illustrationDisplay.beginPath();
      this.illustrationDisplay.arc(xPos, y, 18 - Math.abs(xPos - x) * 0.3, Math.PI * 0.5, Math.PI * 1.5);
      this.illustrationDisplay.strokePath();
    }
    
    // 飛び出している糸
    this.illustrationDisplay.lineStyle(4, 0xBA55D3);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x + 20, y - 10);
    this.drawCurve(x + 20, y - 10, x + 35, y - 5, x + 30, y + 10);
    this.drawCurve(x + 30, y + 10, x + 25, y + 25, x + 35, y + 30);
    this.illustrationDisplay.strokePath();
    
    // 糸の先端
    this.illustrationDisplay.fillStyle(0x9370DB);
    this.illustrationDisplay.fillCircle(x + 35, y + 30, 3);
    
    // 光沢効果
    this.illustrationDisplay.fillStyle(0xFFFFFF, 0.4);
    this.illustrationDisplay.fillCircle(x - 8, y - 8, 6);
    this.illustrationDisplay.fillCircle(x + 5, y + 5, 3);
    
    // 細かい毛羽立ち
    this.illustrationDisplay.lineStyle(1, 0xDDA0DD, 0.6);
    for (let i = 0; i < 8; i++) {
      const angle = (Math.PI * 2 * i) / 8;
      const startX = x + Math.cos(angle) * 23;
      const startY = y + Math.sin(angle) * 23;
      const endX = x + Math.cos(angle) * 27;
      const endY = y + Math.sin(angle) * 27;
      this.illustrationDisplay.lineBetween(startX, startY, endX, endY);
    }
  }

  private drawApron(x: number, y: number): void {
    // エプロン（詳細版）
    
    // エプロンの本体
    this.illustrationDisplay.fillStyle(0xFFB6C1);
    this.illustrationDisplay.fillRoundedRect(x - 20, y - 15, 40, 35, 5);
    
    // エプロンの上部（胸当て）
    this.illustrationDisplay.fillStyle(0xFFC0CB);
    this.illustrationDisplay.fillRoundedRect(x - 15, y - 35, 30, 20, 3);
    
    // ポケット
    this.illustrationDisplay.fillStyle(0xFF69B4);
    this.illustrationDisplay.fillRoundedRect(x - 12, y - 5, 24, 15, 3);
    
    // ポケットの縫い目
    this.illustrationDisplay.lineStyle(1, 0xFF1493);
    this.illustrationDisplay.strokeRoundedRect(x - 12, y - 5, 24, 15, 3);
    
    // ポケットの装飾ステッチ
    this.illustrationDisplay.lineStyle(1, 0xDC143C);
    for (let i = 0; i < 6; i++) {
      this.illustrationDisplay.lineBetween(x - 10 + i * 4, y + 7, x - 8 + i * 4, y + 9);
    }
    
    // 肩紐
    this.illustrationDisplay.lineStyle(6, 0xFF69B4);
    this.illustrationDisplay.lineBetween(x - 15, y - 35, x - 25, y - 45);
    this.illustrationDisplay.lineBetween(x + 15, y - 35, x + 25, y - 45);
    
    // 腰紐
    this.illustrationDisplay.lineStyle(5, 0xFF1493);
    this.illustrationDisplay.lineBetween(x - 20, y - 10, x - 35, y - 5);
    this.illustrationDisplay.lineBetween(x + 20, y - 10, x + 35, y - 5);
    
    // 紐の結び目
    this.illustrationDisplay.fillStyle(0xFF1493);
    this.illustrationDisplay.fillCircle(x - 35, y - 5, 3);
    this.illustrationDisplay.fillCircle(x + 35, y - 5, 3);
    
    // フリル装飾
    this.illustrationDisplay.lineStyle(2, 0xFFB6C1);
    for (let i = 0; i < 8; i++) {
      const waveX = x - 15 + i * 4;
      this.illustrationDisplay.beginPath();
      this.illustrationDisplay.arc(waveX, y + 20, 3, 0, Math.PI);
      this.illustrationDisplay.strokePath();
    }
    
    // ボタン
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillCircle(x, y - 25, 3);
    this.illustrationDisplay.fillCircle(x, y - 30, 3);
    
    // ボタンの縫い目
    this.illustrationDisplay.lineStyle(1, 0x666666);
    this.illustrationDisplay.lineBetween(x - 1, y - 26, x + 1, y - 24);
    this.illustrationDisplay.lineBetween(x - 1, y - 24, x + 1, y - 26);
    this.illustrationDisplay.lineBetween(x - 1, y - 31, x + 1, y - 29);
    this.illustrationDisplay.lineBetween(x - 1, y - 29, x + 1, y - 31);
    
    // レース模様
    this.illustrationDisplay.lineStyle(1, 0xFFFFFF, 0.8);
    for (let i = 0; i < 5; i++) {
      const laceY = y - 30 + i * 6;
      this.illustrationDisplay.beginPath();
      this.illustrationDisplay.moveTo(x - 12, laceY);
      this.illustrationDisplay.quadraticCurveTo(x - 6, laceY - 2, x, laceY);
      this.illustrationDisplay.quadraticCurveTo(x + 6, laceY - 2, x + 12, laceY);
      this.illustrationDisplay.strokePath();
    }
  }

  private drawOrange(x: number, y: number): void {
    // オレンジ（詳細版）
    
    // オレンジの本体
    this.illustrationDisplay.fillStyle(0xFF8C00);
    this.illustrationDisplay.fillCircle(x, y, 20);
    
    // オレンジの皮の質感（点々）
    this.illustrationDisplay.fillStyle(0xFF7F00);
    for (let i = 0; i < 25; i++) {
      const angle = Math.random() * Math.PI * 2;
      const radius = Math.random() * 15;
      const dotX = x + Math.cos(angle) * radius;
      const dotY = y + Math.sin(angle) * radius;
      this.illustrationDisplay.fillCircle(dotX, dotY, 1);
    }
    
    // オレンジの筋（セクション分け）
    this.illustrationDisplay.lineStyle(1, 0xE6E6FA, 0.5);
    for (let i = 0; i < 8; i++) {
      const angle = (Math.PI * 2 * i) / 8;
      this.illustrationDisplay.lineBetween(
        x + Math.cos(angle) * 5,
        y + Math.sin(angle) * 5,
        x + Math.cos(angle) * 18,
        y + Math.sin(angle) * 18
      );
    }
    
    // 茎の部分
    this.illustrationDisplay.fillStyle(0x8B4513);
    this.illustrationDisplay.fillRect(x - 2, y - 25, 4, 8);
    
    // 葉っぱ（2枚）
    this.illustrationDisplay.fillStyle(0x228B22);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x - 3, y - 20);
    this.illustrationDisplay.quadraticCurveTo(x - 8, y - 25, x - 12, y - 18);
    this.illustrationDisplay.quadraticCurveTo(x - 8, y - 15, x - 3, y - 20);
    this.illustrationDisplay.closePath();
    this.illustrationDisplay.fillPath();
    
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x + 3, y - 20);
    this.illustrationDisplay.quadraticCurveTo(x + 8, y - 25, x + 12, y - 18);
    this.illustrationDisplay.quadraticCurveTo(x + 8, y - 15, x + 3, y - 20);
    this.illustrationDisplay.closePath();
    this.illustrationDisplay.fillPath();
    
    // 葉っぱの葉脈
    this.illustrationDisplay.lineStyle(1, 0x006400);
    this.illustrationDisplay.lineBetween(x - 7, y - 20, x - 10, y - 19);
    this.illustrationDisplay.lineBetween(x + 7, y - 20, x + 10, y - 19);
    
    // 光沢効果
    this.illustrationDisplay.fillStyle(0xFFFFFF, 0.6);
    this.illustrationDisplay.fillCircle(x - 6, y - 6, 4);
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.2);
    this.illustrationDisplay.fillEllipse(x + 2, y + 2, 16, 14);
    
    // スライスの表現（側面）
    this.illustrationDisplay.lineStyle(1, 0xFFE4B5);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.arc(x, y, 19, Math.PI * 0.3, Math.PI * 0.7);
    this.illustrationDisplay.strokePath();
  }

  private drawCamera(x: number, y: number): void {
    // カメラ（詳細版）
    
    // カメラ本体
    this.illustrationDisplay.fillStyle(0x2F2F2F);
    this.illustrationDisplay.fillRoundedRect(x - 25, y - 15, 50, 30, 5);
    
    // カメラの上部
    this.illustrationDisplay.fillStyle(0x1C1C1C);
    this.illustrationDisplay.fillRoundedRect(x - 20, y - 25, 40, 10, 3);
    
    // レンズ部分（外側）
    this.illustrationDisplay.fillStyle(0x000000);
    this.illustrationDisplay.fillCircle(x, y, 18);
    
    // レンズ（内側）
    this.illustrationDisplay.fillStyle(0x191970);
    this.illustrationDisplay.fillCircle(x, y, 15);
    
    // レンズ（反射）
    this.illustrationDisplay.fillStyle(0x4169E1);
    this.illustrationDisplay.fillCircle(x, y, 12);
    
    // レンズの光沢
    this.illustrationDisplay.fillStyle(0xFFFFFF, 0.7);
    this.illustrationDisplay.fillCircle(x - 5, y - 5, 4);
    
    // シャッターボタン
    this.illustrationDisplay.fillStyle(0xC0C0C0);
    this.illustrationDisplay.fillCircle(x + 15, y - 20, 4);
    
    // ストラップ取り付け部
    this.illustrationDisplay.fillStyle(0x696969);
    this.illustrationDisplay.fillRect(x - 27, y - 10, 4, 8);
    this.illustrationDisplay.fillRect(x + 23, y - 10, 4, 8);
    
    // ストラップ
    this.illustrationDisplay.lineStyle(3, 0x8B4513);
    this.illustrationDisplay.lineBetween(x - 25, y - 6, x - 35, y + 10);
    this.illustrationDisplay.lineBetween(x + 25, y - 6, x + 35, y + 10);
    
    // ビューファインダー
    this.illustrationDisplay.fillStyle(0x000000);
    this.illustrationDisplay.fillRect(x - 5, y - 23, 10, 6);
    
    // フラッシュ
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillRect(x - 15, y - 23, 6, 4);
    
    // カメラのロゴエリア
    this.illustrationDisplay.fillStyle(0xC0C0C0);
    this.illustrationDisplay.fillRoundedRect(x - 10, y + 8, 20, 5, 1);
    
    // レンズのリング模様
    this.illustrationDisplay.lineStyle(1, 0x333333);
    for (let i = 0; i < 3; i++) {
      this.illustrationDisplay.strokeCircle(x, y, 16 - i * 2);
    }
    
    // ズームリング
    this.illustrationDisplay.lineStyle(2, 0x666666);
    for (let i = 0; i < 8; i++) {
      const angle = (Math.PI * 2 * i) / 8;
      const startRadius = 17;
      const endRadius = 19;
      this.illustrationDisplay.lineBetween(
        x + Math.cos(angle) * startRadius,
        y + Math.sin(angle) * startRadius,
        x + Math.cos(angle) * endRadius,
        y + Math.sin(angle) * endRadius
      );
    }
  }

  // 音響関連メソッド
  private playButtonSound(): void {
    // ボタンクリック音（Web Audio API）
    try {
      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      
      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);
      
      oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
      oscillator.frequency.exponentialRampToValueAtTime(400, audioContext.currentTime + 0.1);
      
      gainNode.gain.setValueAtTime(0.8, audioContext.currentTime);
      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
      
      oscillator.start(audioContext.currentTime);
      oscillator.stop(audioContext.currentTime + 0.1);
    } catch (error) {
      console.log('Audio not supported');
    }
  }

  private playSuccessSound(): void {
    // 正解音（明るい3音階）
    try {
      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
      const frequencies = [523.25, 659.25, 783.99]; // C5, E5, G5
      
      frequencies.forEach((freq, index) => {
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.setValueAtTime(freq, audioContext.currentTime);
        oscillator.type = 'sine';
        
        const startTime = audioContext.currentTime + index * 0.15;
        gainNode.gain.setValueAtTime(0, startTime);
        gainNode.gain.linearRampToValueAtTime(1.0, startTime + 0.05);
        gainNode.gain.exponentialRampToValueAtTime(0.01, startTime + 0.4);
        
        oscillator.start(startTime);
        oscillator.stop(startTime + 0.4);
      });
    } catch (error) {
      console.log('Audio not supported');
    }
  }

  private playErrorSound(): void {
    // 不正解音（低音ブザー）
    try {
      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      
      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);
      
      oscillator.frequency.setValueAtTime(200, audioContext.currentTime);
      oscillator.type = 'sawtooth';
      
      gainNode.gain.setValueAtTime(1.0, audioContext.currentTime);
      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);
      
      oscillator.start(audioContext.currentTime);
      oscillator.stop(audioContext.currentTime + 0.5);
    } catch (error) {
      console.log('Audio not supported');
    }
  }

  // 残りのイラスト描画メソッドは続きます...
  // （文字数制限のため、一部のメソッドを省略）
  
  private drawKeyboard(x: number, y: number): void {
    // キーボード（詳細版）
    
    // キーボード本体
    this.illustrationDisplay.fillStyle(0x2F2F2F);
    this.illustrationDisplay.fillRoundedRect(x - 30, y - 10, 60, 20, 3);
    
    // キー（白）
    this.illustrationDisplay.fillStyle(0xF5F5F5);
    for (let row = 0; row < 3; row++) {
      for (let col = 0; col < 10; col++) {
        const keyX = x - 25 + col * 5.5;
        const keyY = y - 5 + row * 5;
        this.illustrationDisplay.fillRoundedRect(keyX - 2, keyY - 2, 4, 4, 0.5);
      }
    }
    
    // スペースキー
    this.illustrationDisplay.fillRoundedRect(x - 15, y + 8, 30, 4, 1);
  }

  private drawCookie(x: number, y: number): void {
    // クッキー（詳細版）
    
    // クッキー本体
    this.illustrationDisplay.fillStyle(0xDEB887);
    this.illustrationDisplay.fillCircle(x, y, 20);
    
    // チョコチップ
    this.illustrationDisplay.fillStyle(0x8B4513);
    const chipPositions = [
      { x: x - 8, y: y - 5 },
      { x: x + 6, y: y - 8 },
      { x: x - 3, y: y + 7 },
      { x: x + 10, y: y + 3 },
      { x: x - 12, y: y + 8 },
      { x: x + 2, y: y - 12 }
    ];
    
    chipPositions.forEach(pos => {
      this.illustrationDisplay.fillCircle(pos.x, pos.y, 3);
    });
  }

  private drawCake(x: number, y: number): void {
    // ケーキ（詳細版）
    
    // ケーキ台
    this.illustrationDisplay.fillStyle(0xFFE4B5);
    this.illustrationDisplay.fillRoundedRect(x - 20, y, 40, 15, 2);
    
    // ケーキ本体
    this.illustrationDisplay.fillStyle(0xFFF8DC);
    this.illustrationDisplay.fillRoundedRect(x - 18, y - 15, 36, 15, 2);
    
    // クリーム
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillRoundedRect(x - 16, y - 25, 32, 10, 2);
    
    // いちご
    this.illustrationDisplay.fillStyle(0xFF6347);
    this.illustrationDisplay.fillCircle(x, y - 30, 4);
    
    // ろうそく
    this.illustrationDisplay.fillStyle(0xFFFF00);
    this.illustrationDisplay.fillRect(x - 1, y - 40, 2, 15);
    
    // 炎
    this.illustrationDisplay.fillStyle(0xFF4500);
    this.illustrationDisplay.fillCircle(x, y - 42, 2);
  }

  private drawCoffee(x: number, y: number): void {
    // コーヒーカップ（簡易版）
    
    // カップ本体
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillRoundedRect(x - 15, y - 10, 30, 25, 3);
    
    // コーヒー
    this.illustrationDisplay.fillStyle(0x8B4513);
    this.illustrationDisplay.fillRoundedRect(x - 12, y - 7, 24, 18, 2);
    
    // 取っ手
    this.illustrationDisplay.lineStyle(4, 0xDDDDDD);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.arc(x + 20, y + 2, 8, -Math.PI/2, Math.PI/2);
    this.illustrationDisplay.strokePath();
    
    // 湯気（簡易版）
    this.illustrationDisplay.lineStyle(2, 0xC0C0C0);
    for (let i = 0; i < 3; i++) {
      this.illustrationDisplay.lineBetween(x - 5 + i * 5, y - 10, x - 3 + i * 5, y - 20);
      this.illustrationDisplay.lineBetween(x - 1 + i * 5, y - 15, x + 1 + i * 5, y - 25);
    }
  }

  // 残りのイラスト描画メソッド（高精度・要素数増加版）

  private drawSoccer(x: number, y: number): void {
    // サッカーボール（詳細版）
    
    // ボール本体（白）
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillCircle(x, y, 25);
    
    // 五角形パターン（黒）
    this.illustrationDisplay.fillStyle(0x000000);
    
    // 中央の五角形
    this.illustrationDisplay.beginPath();
    for (let i = 0; i < 5; i++) {
      const angle = (Math.PI * 2 * i) / 5 - Math.PI / 2;
      const radius = 8;
      const pointX = x + Math.cos(angle) * radius;
      const pointY = y + Math.sin(angle) * radius;
      if (i === 0) {
        this.illustrationDisplay.moveTo(pointX, pointY);
      } else {
        this.illustrationDisplay.lineTo(pointX, pointY);
      }
    }
    this.illustrationDisplay.closePath();
    this.illustrationDisplay.fillPath();
    
    // 周りの六角形パターン（線のみ）
    this.illustrationDisplay.lineStyle(2, 0x000000);
    for (let i = 0; i < 5; i++) {
      const angle = (Math.PI * 2 * i) / 5 - Math.PI / 2;
      const startRadius = 8;
      const endRadius = 22;
      const startX = x + Math.cos(angle) * startRadius;
      const startY = y + Math.sin(angle) * startRadius;
      const endX = x + Math.cos(angle) * endRadius;
      const endY = y + Math.sin(angle) * endRadius;
      this.illustrationDisplay.lineBetween(startX, startY, endX, endY);
    }
    
    // 曲線パターン
    for (let i = 0; i < 5; i++) {
      const angle1 = (Math.PI * 2 * i) / 5 - Math.PI / 2;
      const angle2 = (Math.PI * 2 * (i + 1)) / 5 - Math.PI / 2;
      const radius = 22;
      
      this.illustrationDisplay.beginPath();
      this.illustrationDisplay.arc(x, y, radius, angle1, angle2);
      this.illustrationDisplay.strokePath();
    }
    
    // ハイライト
    this.illustrationDisplay.fillStyle(0xFFFFFF, 0.6);
    this.illustrationDisplay.fillCircle(x - 8, y - 8, 5);
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.2);
    this.illustrationDisplay.fillEllipse(x + 25, y + 25, 20, 8);
  }

  private drawShirt(x: number, y: number): void {
    // シャツ（詳細版）
    
    // シャツ本体
    this.illustrationDisplay.fillStyle(0x87CEEB);
    this.illustrationDisplay.fillRoundedRect(x - 20, y - 10, 40, 35, 5);
    
    // 袖（左右）
    this.illustrationDisplay.fillStyle(0x6495ED);
    this.illustrationDisplay.fillRoundedRect(x - 35, y - 5, 15, 20, 3);
    this.illustrationDisplay.fillRoundedRect(x + 20, y - 5, 15, 20, 3);
    
    // 襟
    this.illustrationDisplay.fillStyle(0x4682B4);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x - 15, y - 10);
    this.illustrationDisplay.lineTo(x - 8, y - 20);
    this.illustrationDisplay.lineTo(x + 8, y - 20);
    this.illustrationDisplay.lineTo(x + 15, y - 10);
    this.illustrationDisplay.lineTo(x + 8, y - 5);
    this.illustrationDisplay.lineTo(x - 8, y - 5);
    this.illustrationDisplay.closePath();
    this.illustrationDisplay.fillPath();
    
    // ボタン
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    for (let i = 0; i < 4; i++) {
      this.illustrationDisplay.fillCircle(x, y - 5 + i * 8, 2);
    }
    
    // ボタンの縫い目
    this.illustrationDisplay.lineStyle(1, 0x666666);
    for (let i = 0; i < 4; i++) {
      const buttonY = y - 5 + i * 8;
      this.illustrationDisplay.lineBetween(x - 1, buttonY - 1, x + 1, buttonY + 1);
      this.illustrationDisplay.lineBetween(x - 1, buttonY + 1, x + 1, buttonY - 1);
    }
    
    // ポケット
    this.illustrationDisplay.fillStyle(0x4682B4, 0.7);
    this.illustrationDisplay.fillRoundedRect(x - 12, y + 5, 10, 8, 2);
    this.illustrationDisplay.lineStyle(1, 0x4169E1);
    this.illustrationDisplay.strokeRoundedRect(x - 12, y + 5, 10, 8, 2);
    
    // 縫い目
    this.illustrationDisplay.lineStyle(1, 0x4169E1, 0.7);
    this.illustrationDisplay.lineBetween(x - 18, y + 20, x + 18, y + 20);
    for (let i = 0; i < 8; i++) {
      this.illustrationDisplay.lineBetween(x - 15 + i * 4, y + 22, x - 13 + i * 4, y + 24);
    }
  }

  private drawSoup(x: number, y: number): void {
    // スープ（詳細版）
    
    // ボウル（外側）
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillEllipse(x, y + 10, 35, 15);
    this.illustrationDisplay.fillRoundedRect(x - 17, y - 5, 34, 15, 5);
    
    // ボウル（内側）
    this.illustrationDisplay.fillStyle(0xF5F5F5);
    this.illustrationDisplay.fillEllipse(x, y + 8, 30, 12);
    this.illustrationDisplay.fillRoundedRect(x - 15, y - 3, 30, 11, 3);
    
    // スープ（オレンジ色）
    this.illustrationDisplay.fillStyle(0xFF6347);
    this.illustrationDisplay.fillEllipse(x, y, 28, 10);
    
    // 具材（野菜）
    this.illustrationDisplay.fillStyle(0x32CD32);
    this.illustrationDisplay.fillCircle(x - 8, y - 2, 3);
    this.illustrationDisplay.fillCircle(x + 6, y + 1, 2);
    
    this.illustrationDisplay.fillStyle(0xFF8C00);
    this.illustrationDisplay.fillCircle(x - 3, y + 2, 2);
    this.illustrationDisplay.fillCircle(x + 10, y - 1, 3);
    
    // 湯気
    this.illustrationDisplay.lineStyle(2, 0xC0C0C0, 0.8);
    for (let i = 0; i < 4; i++) {
      this.illustrationDisplay.beginPath();
      this.illustrationDisplay.moveTo(x - 10 + i * 7, y - 5);
      this.illustrationDisplay.quadraticCurveTo(x - 8 + i * 7, y - 15, x - 6 + i * 7, y - 10);
      this.illustrationDisplay.quadraticCurveTo(x - 4 + i * 7, y - 20, x - 2 + i * 7, y - 15);
      this.illustrationDisplay.strokePath();
    }
    
    // スプーン
    this.illustrationDisplay.fillStyle(0xC0C0C0);
    this.illustrationDisplay.fillEllipse(x + 20, y - 10, 6, 4);
    this.illustrationDisplay.fillRect(x + 22, y - 8, 2, 15);
    
    // ボウルの取っ手
    this.illustrationDisplay.lineStyle(3, 0xDDDDDD);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.arc(x - 25, y + 2, 8, -Math.PI/3, Math.PI/3);
    this.illustrationDisplay.strokePath();
  }

  private drawSweater(x: number, y: number): void {
    // セーター（詳細版）
    
    // セーター本体
    this.illustrationDisplay.fillStyle(0x9370DB);
    this.illustrationDisplay.fillRoundedRect(x - 22, y - 8, 44, 33, 5);
    
    // 袖（太め）
    this.illustrationDisplay.fillStyle(0x8A2BE2);
    this.illustrationDisplay.fillRoundedRect(x - 38, y - 3, 16, 23, 4);
    this.illustrationDisplay.fillRoundedRect(x + 22, y - 3, 16, 23, 4);
    
    // 首部分
    this.illustrationDisplay.fillStyle(0x7B68EE);
    this.illustrationDisplay.fillRoundedRect(x - 12, y - 18, 24, 10, 8);
    
    // ケーブルニット模様
    this.illustrationDisplay.lineStyle(2, 0xBA55D3);
    
    // 縦のケーブル
    for (let i = 0; i < 3; i++) {
      const cableX = x - 10 + i * 10;
      this.illustrationDisplay.beginPath();
      this.illustrationDisplay.moveTo(cableX, y - 5);
      for (let j = 0; j < 6; j++) {
        const waveY = y - 5 + j * 5;
        this.illustrationDisplay.quadraticCurveTo(cableX + 3, waveY + 2, cableX, waveY + 5);
      }
      this.illustrationDisplay.strokePath();
    }
    
    // 横のボーダー
    for (let i = 0; i < 4; i++) {
      const borderY = y - 5 + i * 8;
      this.illustrationDisplay.lineBetween(x - 20, borderY, x + 20, borderY);
    }
    
    // リブ編み（袖口）
    this.illustrationDisplay.lineStyle(1, 0x9370DB);
    for (let i = 0; i < 6; i++) {
      this.illustrationDisplay.lineBetween(x - 36 + i * 2, y + 18, x - 36 + i * 2, y + 20);
      this.illustrationDisplay.lineBetween(x + 24 + i * 2, y + 18, x + 24 + i * 2, y + 20);
    }
    
    // リブ編み（裾）
    for (let i = 0; i < 11; i++) {
      this.illustrationDisplay.lineBetween(x - 20 + i * 4, y + 23, x - 20 + i * 4, y + 25);
    }
    
    // 首リブ
    for (let i = 0; i < 6; i++) {
      this.illustrationDisplay.lineBetween(x - 10 + i * 4, y - 16, x - 10 + i * 4, y - 18);
    }
  }

  private drawSofa(x: number, y: number): void {
    // ソファー（詳細版）
    
    // ソファー本体（座面）
    this.illustrationDisplay.fillStyle(0x8B4513);
    this.illustrationDisplay.fillRoundedRect(x - 25, y, 50, 20, 5);
    
    // 背もたれ
    this.illustrationDisplay.fillStyle(0xA0522D);
    this.illustrationDisplay.fillRoundedRect(x - 25, y - 20, 50, 20, 5);
    
    // 肘掛け（左右）
    this.illustrationDisplay.fillStyle(0x8B4513);
    this.illustrationDisplay.fillRoundedRect(x - 30, y - 15, 5, 30, 3);
    this.illustrationDisplay.fillRoundedRect(x + 25, y - 15, 5, 30, 3);
    
    // クッション
    this.illustrationDisplay.fillStyle(0xDEB887);
    this.illustrationDisplay.fillRoundedRect(x - 20, y - 18, 18, 15, 3);
    this.illustrationDisplay.fillRoundedRect(x + 2, y - 18, 18, 15, 3);
    
    // クッションの縫い目
    this.illustrationDisplay.lineStyle(1, 0xCD853F);
    this.illustrationDisplay.strokeRoundedRect(x - 20, y - 18, 18, 15, 3);
    this.illustrationDisplay.strokeRoundedRect(x + 2, y - 18, 18, 15, 3);
    
    // クッションの中央ボタン
    this.illustrationDisplay.fillStyle(0x8B4513);
    this.illustrationDisplay.fillCircle(x - 11, y - 10, 2);
    this.illustrationDisplay.fillCircle(x + 11, y - 10, 2);
    
    // 脚
    this.illustrationDisplay.fillStyle(0x654321);
    this.illustrationDisplay.fillRoundedRect(x - 20, y + 20, 6, 8, 2);
    this.illustrationDisplay.fillRoundedRect(x - 3, y + 20, 6, 8, 2);
    this.illustrationDisplay.fillRoundedRect(x + 14, y + 20, 6, 8, 2);
    
    // 装飾的な縫い目
    this.illustrationDisplay.lineStyle(1, 0xA0522D, 0.7);
    for (let i = 0; i < 5; i++) {
      this.illustrationDisplay.lineBetween(x - 23 + i * 12, y + 5, x - 21 + i * 12, y + 7);
    }
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.2);
    this.illustrationDisplay.fillEllipse(x, y + 30, 45, 8);
  }

  private drawTowel(x: number, y: number): void {
    // タオル（詳細版）
    
    // タオル本体（折りたたまれた状態）
    this.illustrationDisplay.fillStyle(0x87CEEB);
    this.illustrationDisplay.fillRoundedRect(x - 18, y - 15, 36, 30, 3);
    
    // タオルの重なり部分
    this.illustrationDisplay.fillStyle(0x6495ED);
    this.illustrationDisplay.fillRoundedRect(x - 16, y - 13, 32, 26, 2);
    
    // フリンジ（房）
    this.illustrationDisplay.lineStyle(2, 0x4682B4);
    for (let i = 0; i < 12; i++) {
      const fringeX = x - 15 + i * 2.5;
      this.illustrationDisplay.lineBetween(fringeX, y + 13, fringeX, y + 18);
      this.illustrationDisplay.lineBetween(fringeX, y - 15, fringeX, y - 20);
    }
    
    // タオルの織り模様
    this.illustrationDisplay.lineStyle(1, 0x4169E1, 0.5);
    for (let i = 0; i < 8; i++) {
      this.illustrationDisplay.lineBetween(x - 16, y - 10 + i * 3, x + 16, y - 10 + i * 3);
    }
    
    // 縦の織り目
    for (let i = 0; i < 11; i++) {
      this.illustrationDisplay.lineBetween(x - 15 + i * 3, y - 13, x - 15 + i * 3, y + 13);
    }
    
    // ブランドラベル
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillRoundedRect(x - 8, y + 3, 16, 6, 1);
    this.illustrationDisplay.lineStyle(1, 0x4682B4);
    this.illustrationDisplay.strokeRoundedRect(x - 8, y + 3, 16, 6, 1);
    
    // ラベルのテキスト（TOWEL）
    this.illustrationDisplay.fillStyle(0x4682B4);
    this.illustrationDisplay.fillRect(x - 6, y + 5, 2, 2);
    this.illustrationDisplay.fillRect(x - 2, y + 5, 4, 1);
    this.illustrationDisplay.fillRect(x + 4, y + 5, 2, 2);
  }

  private drawCheese(x: number, y: number): void {
    // チーズ（詳細版）
    
    // チーズ本体（三角形の切れ端）
    this.illustrationDisplay.fillStyle(0xFFD700);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x - 20, y + 15);
    this.illustrationDisplay.lineTo(x + 20, y + 15);
    this.illustrationDisplay.lineTo(x + 15, y - 15);
    this.illustrationDisplay.lineTo(x - 15, y - 15);
    this.illustrationDisplay.closePath();
    this.illustrationDisplay.fillPath();
    
    // チーズの側面（立体感）
    this.illustrationDisplay.fillStyle(0xFFC000);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x + 15, y - 15);
    this.illustrationDisplay.lineTo(x + 20, y - 10);
    this.illustrationDisplay.lineTo(x + 25, y + 15);
    this.illustrationDisplay.lineTo(x + 20, y + 15);
    this.illustrationDisplay.closePath();
    this.illustrationDisplay.fillPath();
    
    // 上面
    this.illustrationDisplay.fillStyle(0xFFE55C);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x - 15, y - 15);
    this.illustrationDisplay.lineTo(x + 15, y - 15);
    this.illustrationDisplay.lineTo(x + 20, y - 10);
    this.illustrationDisplay.lineTo(x - 10, y - 10);
    this.illustrationDisplay.closePath();
    this.illustrationDisplay.fillPath();
    
    // チーズの穴
    this.illustrationDisplay.fillStyle(0xFFB000);
    this.illustrationDisplay.fillCircle(x - 5, y - 5, 3);
    this.illustrationDisplay.fillCircle(x + 8, y + 2, 4);
    this.illustrationDisplay.fillCircle(x - 8, y + 8, 2);
    this.illustrationDisplay.fillCircle(x + 3, y - 8, 2);
    
    // 穴の影
    this.illustrationDisplay.fillStyle(0xFF8C00);
    this.illustrationDisplay.fillCircle(x - 4, y - 4, 2);
    this.illustrationDisplay.fillCircle(x + 9, y + 3, 3);
    this.illustrationDisplay.fillCircle(x - 7, y + 9, 1);
    
    // チーズの質感
    this.illustrationDisplay.fillStyle(0xFFE55C, 0.3);
    for (let i = 0; i < 8; i++) {
      const dotX = x - 12 + Math.random() * 24;
      const dotY = y - 8 + Math.random() * 16;
      this.illustrationDisplay.fillCircle(dotX, dotY, 1);
    }
  }

  private drawTour(x: number, y: number): void {
    // ツアー（観光バス）（詳細版）
    
    // バス本体
    this.illustrationDisplay.fillStyle(0x4169E1);
    this.illustrationDisplay.fillRoundedRect(x - 30, y - 10, 60, 20, 5);
    
    // バスの屋根
    this.illustrationDisplay.fillStyle(0x1E40AF);
    this.illustrationDisplay.fillRoundedRect(x - 28, y - 15, 56, 5, 2);
    
    // 窓（複数）
    this.illustrationDisplay.fillStyle(0x87CEEB);
    for (let i = 0; i < 4; i++) {
      this.illustrationDisplay.fillRoundedRect(x - 22 + i * 12, y - 8, 8, 6, 1);
    }
    
    // フロントガラス
    this.illustrationDisplay.fillStyle(0xB0E0E6);
    this.illustrationDisplay.fillRoundedRect(x + 22, y - 8, 6, 12, 2);
    
    // ドア
    this.illustrationDisplay.fillStyle(0x2563EB);
    this.illustrationDisplay.fillRoundedRect(x - 30, y - 8, 6, 16, 2);
    
    // ドアハンドル
    this.illustrationDisplay.fillStyle(0xC0C0C0);
    this.illustrationDisplay.fillCircle(x - 26, y, 1);
    
    // タイヤ
    this.illustrationDisplay.fillStyle(0x1F2937);
    this.illustrationDisplay.fillCircle(x - 18, y + 12, 6);
    this.illustrationDisplay.fillCircle(x + 18, y + 12, 6);
    
    // ホイール
    this.illustrationDisplay.fillStyle(0xC0C0C0);
    this.illustrationDisplay.fillCircle(x - 18, y + 12, 3);
    this.illustrationDisplay.fillCircle(x + 18, y + 12, 3);
    
    // ヘッドライト
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillCircle(x + 28, y + 5, 3);
    
    // ツアー会社のロゴエリア
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillRoundedRect(x - 10, y + 2, 20, 6, 1);
    
    // 「TOUR」テキスト
    this.illustrationDisplay.fillStyle(0x4169E1);
    this.illustrationDisplay.fillRect(x - 8, y + 3, 2, 4);
    this.illustrationDisplay.fillRect(x - 5, y + 3, 3, 1);
    this.illustrationDisplay.fillRect(x - 5, y + 6, 3, 1);
    this.illustrationDisplay.fillRect(x - 1, y + 3, 2, 4);
    this.illustrationDisplay.fillRect(x + 2, y + 3, 2, 4);
    this.illustrationDisplay.fillRect(x + 5, y + 3, 2, 4);
    
    // バスの影
    this.illustrationDisplay.fillStyle(0x000000, 0.2);
    this.illustrationDisplay.fillEllipse(x, y + 20, 50, 6);
  }

  private drawTable(x: number, y: number): void {
    // テーブル（詳細版）
    
    // テーブル天板
    this.illustrationDisplay.fillStyle(0xD2691E);
    this.illustrationDisplay.fillEllipse(x, y - 10, 40, 20);
    
    // 天板の厚み（立体感）
    this.illustrationDisplay.fillStyle(0xA0522D);
    this.illustrationDisplay.fillEllipse(x + 2, y - 8, 40, 20);
    
    // 木目模様
    this.illustrationDisplay.lineStyle(1, 0x8B4513, 0.6);
    for (let i = 0; i < 5; i++) {
      this.illustrationDisplay.beginPath();
      this.illustrationDisplay.ellipse(x - 15 + i * 8, y - 10, 15, 3, 0, 0, Math.PI * 2);
      this.illustrationDisplay.strokePath();
    }
    
    // テーブル脚（4本）
    this.illustrationDisplay.fillStyle(0x8B4513);
    this.illustrationDisplay.fillRect(x - 15, y - 5, 4, 25);
    this.illustrationDisplay.fillRect(x + 11, y - 5, 4, 25);
    this.illustrationDisplay.fillRect(x - 15, y + 5, 4, 25);
    this.illustrationDisplay.fillRect(x + 11, y + 5, 4, 25);
    
    // 脚の装飾
    this.illustrationDisplay.lineStyle(1, 0x654321);
    this.illustrationDisplay.strokeRect(x - 15, y - 5, 4, 25);
    this.illustrationDisplay.strokeRect(x + 11, y - 5, 4, 25);
    this.illustrationDisplay.strokeRect(x - 15, y + 5, 4, 25);
    this.illustrationDisplay.strokeRect(x + 11, y + 5, 4, 25);
    
    // テーブル上のアイテム
    // カップ
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillRoundedRect(x - 8, y - 15, 6, 8, 2);
    this.illustrationDisplay.fillStyle(0x8B4513);
    this.illustrationDisplay.fillRoundedRect(x - 7, y - 14, 4, 6, 1);
    
    // 本
    this.illustrationDisplay.fillStyle(0x4169E1);
    this.illustrationDisplay.fillRect(x + 5, y - 12, 8, 10);
    this.illustrationDisplay.fillStyle(0x1E40AF);
    this.illustrationDisplay.fillRect(x + 5, y - 12, 8, 2);
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.2);
    this.illustrationDisplay.fillEllipse(x, y + 32, 35, 8);
  }

  private drawTomato(x: number, y: number): void {
    // トマト（詳細版）
    
    // トマト本体
    this.illustrationDisplay.fillStyle(0xFF6347);
    this.illustrationDisplay.fillCircle(x, y, 18);
    
    // トマトの溝
    this.illustrationDisplay.lineStyle(2, 0xDC143C);
    for (let i = 0; i < 6; i++) {
      const angle = (Math.PI * 2 * i) / 6;
      this.illustrationDisplay.lineBetween(
        x + Math.cos(angle) * 5,
        y + Math.sin(angle) * 5,
        x + Math.cos(angle) * 16,
        y + Math.sin(angle) * 16
      );
    }
    
    // ヘタ（緑の部分）
    this.illustrationDisplay.fillStyle(0x228B22);
    for (let i = 0; i < 5; i++) {
      const angle = (Math.PI * 2 * i) / 5 - Math.PI / 2;
      this.illustrationDisplay.beginPath();
      this.illustrationDisplay.moveTo(x, y - 18);
      this.illustrationDisplay.lineTo(x + Math.cos(angle) * 12, y - 25 + Math.sin(angle) * 8);
      this.illustrationDisplay.lineTo(x + Math.cos(angle) * 6, y - 15 + Math.sin(angle) * 4);
      this.illustrationDisplay.closePath();
      this.illustrationDisplay.fillPath();
    }
    
    // 茎
    this.illustrationDisplay.fillStyle(0x006400);
    this.illustrationDisplay.fillRect(x - 1, y - 30, 2, 12);
    
    // ヘタの中央
    this.illustrationDisplay.fillStyle(0x32CD32);
    this.illustrationDisplay.fillCircle(x, y - 18, 3);
    
    // 光沢
    this.illustrationDisplay.fillStyle(0xFFFFFF, 0.6);
    this.illustrationDisplay.fillCircle(x - 6, y - 6, 4);
    
    // 小さな反射点
    this.illustrationDisplay.fillStyle(0xFFFFFF, 0.8);
    this.illustrationDisplay.fillCircle(x + 8, y + 3, 2);
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.2);
    this.illustrationDisplay.fillEllipse(x + 2, y + 2, 16, 14);
  }

  private drawKnife(x: number, y: number): void {
    // ナイフ（詳細版）
    
    // ナイフのハンドル
    this.illustrationDisplay.fillStyle(0x8B4513);
    this.illustrationDisplay.fillRoundedRect(x - 15, y + 5, 10, 20, 3);
    
    // ハンドルの装飾
    this.illustrationDisplay.lineStyle(1, 0x654321);
    for (let i = 0; i < 4; i++) {
      this.illustrationDisplay.lineBetween(x - 14, y + 8 + i * 3, x - 6, y + 8 + i * 3);
    }
    
    // ハンドルのリベット
    this.illustrationDisplay.fillStyle(0xC0C0C0);
    this.illustrationDisplay.fillCircle(x - 10, y + 10, 1);
    this.illustrationDisplay.fillCircle(x - 10, y + 20, 1);
    
    // ブレード（刃）
    this.illustrationDisplay.fillStyle(0xDCDCDC);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x - 15, y + 5);
    this.illustrationDisplay.lineTo(x + 15, y - 5);
    this.illustrationDisplay.lineTo(x + 20, y);
    this.illustrationDisplay.lineTo(x + 15, y + 5);
    this.illustrationDisplay.lineTo(x - 15, y + 10);
    this.illustrationDisplay.closePath();
    this.illustrationDisplay.fillPath();
    
    // ブレードの鋭利な輪郭
    this.illustrationDisplay.lineStyle(2, 0xA9A9A9);
    this.illustrationDisplay.strokePath();
    
    // ブレードの反射
    this.illustrationDisplay.lineStyle(2, 0xFFFFFF, 0.8);
    this.illustrationDisplay.lineBetween(x - 10, y - 2, x + 10, y - 4);
    
    // ガード（つば）
    this.illustrationDisplay.fillStyle(0xC0C0C0);
    this.illustrationDisplay.fillRect(x - 17, y + 3, 4, 4);
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.3);
    this.illustrationDisplay.fillEllipse(x, y + 28, 25, 5);
  }

  private drawNews(x: number, y: number): void {
    // ニュース（新聞）（詳細版）
    
    // 新聞の本体
    this.illustrationDisplay.fillStyle(0xF5F5F5);
    this.illustrationDisplay.fillRect(x - 18, y - 20, 36, 40);
    
    // 新聞の境界線
    this.illustrationDisplay.lineStyle(2, 0x000000);
    this.illustrationDisplay.strokeRect(x - 18, y - 20, 36, 40);
    
    // ヘッドライン
    this.illustrationDisplay.fillStyle(0x000000);
    this.illustrationDisplay.fillRect(x - 15, y - 17, 30, 4);
    
    // サブヘッドライン
    this.illustrationDisplay.fillRect(x - 12, y - 10, 24, 2);
    
    // 記事のコラム（左）
    this.illustrationDisplay.fillRect(x - 15, y - 5, 12, 1);
    this.illustrationDisplay.fillRect(x - 15, y - 2, 10, 1);
    this.illustrationDisplay.fillRect(x - 15, y + 1, 12, 1);
    this.illustrationDisplay.fillRect(x - 15, y + 4, 8, 1);
    this.illustrationDisplay.fillRect(x - 15, y + 7, 11, 1);
    
    // 記事のコラム（右）
    this.illustrationDisplay.fillRect(x + 2, y - 5, 12, 1);
    this.illustrationDisplay.fillRect(x + 2, y - 2, 10, 1);
    this.illustrationDisplay.fillRect(x + 2, y + 1, 12, 1);
    this.illustrationDisplay.fillRect(x + 2, y + 4, 9, 1);
    this.illustrationDisplay.fillRect(x + 2, y + 7, 11, 1);
    
    // 写真エリア
    this.illustrationDisplay.fillStyle(0xD3D3D3);
    this.illustrationDisplay.fillRect(x - 8, y + 12, 16, 6);
    this.illustrationDisplay.lineStyle(1, 0x808080);
    this.illustrationDisplay.strokeRect(x - 8, y + 12, 16, 6);
    
    // 写真内のシンプルな図形
    this.illustrationDisplay.fillStyle(0xA9A9A9);
    this.illustrationDisplay.fillCircle(x - 2, y + 14, 2);
    this.illustrationDisplay.fillTriangle(x + 2, y + 16, x + 6, y + 16, x + 4, y + 12);
    
    // 折り目
    this.illustrationDisplay.lineStyle(1, 0xC0C0C0);
    this.illustrationDisplay.lineBetween(x, y - 20, x, y + 20);
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.2);
    this.illustrationDisplay.fillRect(x - 16, y + 22, 34, 3);
  }

  private drawNoodle(x: number, y: number): void {
    // ヌードル（麺）（詳細版）
    
    // ボウル
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillEllipse(x, y + 5, 36, 30);
    
    // ボウルの縁
    this.illustrationDisplay.lineStyle(3, 0xE0E0E0);
    this.illustrationDisplay.strokeEllipse(x, y + 5, 36, 30);
    
    // ボウルの内側
    this.illustrationDisplay.fillStyle(0xF8F8FF);
    this.illustrationDisplay.fillEllipse(x, y + 8, 30, 24);
    
    // スープ
    this.illustrationDisplay.fillStyle(0xDEB887, 0.8);
    this.illustrationDisplay.fillEllipse(x, y + 8, 28, 22);
    
    // 麺（複数の曲線）
    this.illustrationDisplay.lineStyle(3, 0xF5DEB3);
    
    // 麺の束1
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x - 10, y + 5);
    this.illustrationDisplay.quadraticCurveTo(x - 5, y - 2, x, y + 8);
    this.illustrationDisplay.quadraticCurveTo(x + 5, y + 15, x + 8, y + 10);
    this.illustrationDisplay.strokePath();
    
    // 麺の束2
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x + 8, y + 2);
    this.illustrationDisplay.quadraticCurveTo(x + 3, y + 10, x - 3, y + 6);
    this.illustrationDisplay.quadraticCurveTo(x - 8, y + 12, x - 5, y + 15);
    this.illustrationDisplay.strokePath();
    
    // 麺の束3
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x - 5, y);
    this.illustrationDisplay.quadraticCurveTo(x, y + 8, x + 6, y + 5);
    this.illustrationDisplay.quadraticCurveTo(x + 12, y + 12, x + 10, y + 18);
    this.illustrationDisplay.strokePath();
    
    // チャーシュー
    this.illustrationDisplay.fillStyle(0xD2691E);
    this.illustrationDisplay.fillCircle(x - 6, y + 5, 4);
    this.illustrationDisplay.fillStyle(0xCD853F);
    this.illustrationDisplay.fillCircle(x - 6, y + 5, 2);
    
    // ネギ
    this.illustrationDisplay.fillStyle(0x32CD32);
    this.illustrationDisplay.fillCircle(x + 4, y + 8, 2);
    this.illustrationDisplay.fillCircle(x + 7, y + 12, 2);
    
    // 箸
    this.illustrationDisplay.lineStyle(4, 0x8B4513);
    this.illustrationDisplay.lineBetween(x + 12, y - 10, x + 18, y + 15);
    this.illustrationDisplay.lineBetween(x + 15, y - 8, x + 21, y + 17);
    
    // 湯気
    this.illustrationDisplay.lineStyle(2, 0xFFFFFF, 0.7);
    for (let i = 0; i < 3; i++) {
      this.illustrationDisplay.beginPath();
      this.illustrationDisplay.moveTo(x - 8 + i * 8, y - 5);
      this.illustrationDisplay.quadraticCurveTo(x - 6 + i * 8, y - 15, x - 4 + i * 8, y - 20);
      this.illustrationDisplay.strokePath();
    }
  }

  private drawNecklace(x: number, y: number): void {
    // ネックレス（詳細版）
    
    // ネックレスチェーン（楕円形）
    this.illustrationDisplay.lineStyle(3, 0xFFD700);
    this.illustrationDisplay.strokeEllipse(x, y, 30, 40);
    
    // チェーンのリンク模様
    this.illustrationDisplay.lineStyle(1, 0xFFA500);
    for (let i = 0; i < 16; i++) {
      const angle = (Math.PI * 2 * i) / 16;
      const linkX = x + Math.cos(angle) * 15;
      const linkY = y + Math.sin(angle) * 20;
      this.illustrationDisplay.strokeEllipse(linkX, linkY, 2, 3);
    }
    
    // ペンダント（中央の宝石）
    this.illustrationDisplay.fillStyle(0x4169E1);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x, y + 15);
    this.illustrationDisplay.lineTo(x - 6, y + 25);
    this.illustrationDisplay.lineTo(x + 6, y + 25);
    this.illustrationDisplay.closePath();
    this.illustrationDisplay.fillPath();
    
    // ペンダントの上部
    this.illustrationDisplay.fillStyle(0x1E40AF);
    this.illustrationDisplay.fillRect(x - 4, y + 15, 8, 4);
    
    // ペンダントの輝き
    this.illustrationDisplay.fillStyle(0xFFFFFF, 0.8);
    this.illustrationDisplay.fillCircle(x - 2, y + 20, 1);
    
    // ペンダントトップの装飾
    this.illustrationDisplay.fillStyle(0xC0C0C0);
    this.illustrationDisplay.fillRect(x - 1, y + 12, 2, 3);
    
    // 小さな宝石（サイドストーン）
    this.illustrationDisplay.fillStyle(0xFF69B4);
    this.illustrationDisplay.fillCircle(x - 12, y - 8, 2);
    this.illustrationDisplay.fillCircle(x + 12, y - 8, 2);
    this.illustrationDisplay.fillCircle(x - 8, y + 12, 2);
    this.illustrationDisplay.fillCircle(x + 8, y + 12, 2);
    
    // 宝石の輝き
    this.illustrationDisplay.fillStyle(0xFFFFFF, 0.9);
    this.illustrationDisplay.fillCircle(x - 12, y - 8, 1);
    this.illustrationDisplay.fillCircle(x + 12, y - 8, 1);
    this.illustrationDisplay.fillCircle(x - 8, y + 12, 1);
    this.illustrationDisplay.fillCircle(x + 8, y + 12, 1);
    
    // クラスプ（留め具）
    this.illustrationDisplay.fillStyle(0xC0C0C0);
    this.illustrationDisplay.fillRect(x - 2, y - 22, 4, 2);
  }

  private drawNotebook(x: number, y: number): void {
    // ノート（詳細版）
    
    // ノートの表紙
    this.illustrationDisplay.fillStyle(0x4169E1);
    this.illustrationDisplay.fillRoundedRect(x - 15, y - 18, 30, 36, 3);
    
    // 表紙の境界線
    this.illustrationDisplay.lineStyle(2, 0x1E40AF);
    this.illustrationDisplay.strokeRoundedRect(x - 15, y - 18, 30, 36, 3);
    
    // スパイラル部分
    this.illustrationDisplay.fillStyle(0xC0C0C0);
    this.illustrationDisplay.fillRect(x - 18, y - 18, 6, 36);
    
    // スパイラルの穴
    this.illustrationDisplay.fillStyle(0x808080);
    for (let i = 0; i < 12; i++) {
      this.illustrationDisplay.fillCircle(x - 15, y - 15 + i * 3, 1);
    }
    
    // ノートのタイトル領域
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillRoundedRect(x - 12, y - 12, 24, 6, 2);
    
    // タイトル文字（NOTE）
    this.illustrationDisplay.fillStyle(0x000000);
    this.illustrationDisplay.fillRect(x - 10, y - 10, 2, 2);
    this.illustrationDisplay.fillRect(x - 7, y - 10, 2, 2);
    this.illustrationDisplay.fillRect(x - 4, y - 10, 2, 2);
    this.illustrationDisplay.fillRect(x - 1, y - 10, 2, 2);
    
    // ページの厚み
    this.illustrationDisplay.fillStyle(0xF5F5F5);
    this.illustrationDisplay.fillRect(x + 12, y - 16, 3, 32);
    this.illustrationDisplay.fillRect(x - 13, y + 16, 28, 2);
    
    // ページの線
    this.illustrationDisplay.lineStyle(1, 0xE0E0E0);
    for (let i = 0; i < 8; i++) {
      this.illustrationDisplay.lineBetween(x + 12, y - 14 + i * 4, x + 14, y - 14 + i * 4);
    }
    
    // 表紙のラベル
    this.illustrationDisplay.fillStyle(0xFFFFFF, 0.8);
    this.illustrationDisplay.fillRect(x - 8, y + 2, 16, 8);
    
    // ラベルの罫線
    this.illustrationDisplay.lineStyle(1, 0x1E40AF);
    this.illustrationDisplay.lineBetween(x - 6, y + 4, x + 6, y + 4);
    this.illustrationDisplay.lineBetween(x - 6, y + 6, x + 6, y + 6);
    this.illustrationDisplay.lineBetween(x - 6, y + 8, x + 6, y + 8);
    
    // ペンホルダー
    this.illustrationDisplay.fillStyle(0x000000);
    this.illustrationDisplay.fillRect(x + 10, y - 5, 2, 8);
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.2);
    this.illustrationDisplay.fillEllipse(x, y + 22, 25, 5);
  }

  private drawHamburger(x: number, y: number): void {
    // ハンバーガー（詳細版）
    
    // 上のバン
    this.illustrationDisplay.fillStyle(0xDEB887);
    this.illustrationDisplay.fillEllipse(x, y - 8, 30, 12);
    
    // バンの焼き色
    this.illustrationDisplay.fillStyle(0xCD853F);
    this.illustrationDisplay.fillEllipse(x, y - 8, 28, 10);
    
    // ゴマ
    this.illustrationDisplay.fillStyle(0xF5DEB3);
    this.illustrationDisplay.fillCircle(x - 8, y - 10, 1);
    this.illustrationDisplay.fillCircle(x - 2, y - 12, 1);
    this.illustrationDisplay.fillCircle(x + 6, y - 9, 1);
    this.illustrationDisplay.fillCircle(x + 10, y - 11, 1);
    
    // レタス
    this.illustrationDisplay.fillStyle(0x32CD32);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x - 12, y - 2);
    this.illustrationDisplay.quadraticCurveTo(x - 8, y - 6, x - 4, y - 2);
    this.illustrationDisplay.quadraticCurveTo(x, y + 2, x + 4, y - 2);
    this.illustrationDisplay.quadraticCurveTo(x + 8, y - 6, x + 12, y - 2);
    this.illustrationDisplay.lineTo(x + 12, y);
    this.illustrationDisplay.lineTo(x - 12, y);
    this.illustrationDisplay.closePath();
    this.illustrationDisplay.fillPath();
    
    // トマト
    this.illustrationDisplay.fillStyle(0xFF6347);
    this.illustrationDisplay.fillEllipse(x - 6, y + 2, 8, 3);
    this.illustrationDisplay.fillEllipse(x + 6, y + 2, 8, 3);
    
    // パティ（肉）
    this.illustrationDisplay.fillStyle(0x8B4513);
    this.illustrationDisplay.fillEllipse(x, y + 5, 26, 8);
    
    // パティの焼き目
    this.illustrationDisplay.fillStyle(0x654321);
    this.illustrationDisplay.fillEllipse(x, y + 5, 24, 6);
    
    // チーズ
    this.illustrationDisplay.fillStyle(0xFFD700);
    this.illustrationDisplay.fillEllipse(x, y + 8, 28, 4);
    
    // 下のバン
    this.illustrationDisplay.fillStyle(0xDEB887);
    this.illustrationDisplay.fillEllipse(x, y + 12, 30, 10);
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.2);
    this.illustrationDisplay.fillEllipse(x, y + 20, 25, 4);
  }

  private drawPiano(x: number, y: number): void {
    // ピアノ（詳細版）
    
    // ピアノ本体
    this.illustrationDisplay.fillStyle(0x000000);
    this.illustrationDisplay.fillRoundedRect(x - 20, y - 10, 40, 20, 3);
    
    // ピアノの輪郭
    this.illustrationDisplay.lineStyle(2, 0x333333);
    this.illustrationDisplay.strokeRoundedRect(x - 20, y - 10, 40, 20, 3);
    
    // 白鍵
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    for (let i = 0; i < 7; i++) {
      this.illustrationDisplay.fillRect(x - 17 + i * 5, y - 5, 4, 12);
      this.illustrationDisplay.lineStyle(1, 0xCCCCCC);
      this.illustrationDisplay.strokeRect(x - 17 + i * 5, y - 5, 4, 12);
    }
    
    // 黒鍵
    this.illustrationDisplay.fillStyle(0x000000);
    for (let i = 0; i < 5; i++) {
      if (i !== 2) { // ミとファの間には黒鍵なし
        const xPos = i < 2 ? x - 15 + i * 5 + 2.5 : x - 15 + (i + 1) * 5 + 2.5;
        this.illustrationDisplay.fillRect(xPos, y - 5, 3, 7);
      }
    }
    
    // ピアノの脚
    this.illustrationDisplay.fillStyle(0x000000);
    this.illustrationDisplay.fillRect(x - 15, y + 10, 3, 8);
    this.illustrationDisplay.fillRect(x + 12, y + 10, 3, 8);
    
    // ペダル
    this.illustrationDisplay.fillStyle(0x444444);
    this.illustrationDisplay.fillEllipse(x - 5, y + 15, 6, 2);
    this.illustrationDisplay.fillEllipse(x + 5, y + 15, 6, 2);
    
    // ピアノの光沢
    this.illustrationDisplay.fillStyle(0xFFFFFF, 0.3);
    this.illustrationDisplay.fillRect(x - 18, y - 8, 2, 16);
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.2);
    this.illustrationDisplay.fillEllipse(x, y + 20, 35, 5);
  }

  private drawPool(x: number, y: number): void {
    // プール（詳細版）
    
    // プールの水面
    this.illustrationDisplay.fillStyle(0x00CED1);
    this.illustrationDisplay.fillEllipse(x, y, 35, 25);
    
    // プールのふち
    this.illustrationDisplay.lineStyle(4, 0x87CEEB);
    this.illustrationDisplay.strokeEllipse(x, y, 35, 25);
    
    // 水の波紋
    this.illustrationDisplay.lineStyle(1, 0x4682B4, 0.6);
    for (let i = 0; i < 3; i++) {
      this.illustrationDisplay.strokeEllipse(x, y, 30 - i * 8, 20 - i * 6);
    }
    
    // プールサイド
    this.illustrationDisplay.fillStyle(0xD3D3D3);
    this.illustrationDisplay.fillEllipse(x, y, 42, 32);
    this.illustrationDisplay.fillStyle(0x00CED1);
    this.illustrationDisplay.fillEllipse(x, y, 35, 25);
    
    // 排水口
    this.illustrationDisplay.fillStyle(0x696969);
    this.illustrationDisplay.fillCircle(x, y + 8, 3);
    this.illustrationDisplay.fillStyle(0x000000);
    this.illustrationDisplay.fillCircle(x, y + 8, 1);
    
    // プールのレーン
    this.illustrationDisplay.lineStyle(2, 0x0000FF, 0.5);
    this.illustrationDisplay.lineBetween(x - 10, y - 10, x - 10, y + 10);
    this.illustrationDisplay.lineBetween(x + 10, y - 10, x + 10, y + 10);
    
    // 浮き輪
    this.illustrationDisplay.lineStyle(6, 0xFF69B4);
    this.illustrationDisplay.strokeCircle(x - 10, y - 5, 6);
    this.illustrationDisplay.lineStyle(2, 0xFF1493);
    this.illustrationDisplay.strokeCircle(x - 10, y - 5, 6);
    
    // 水しぶき
    this.illustrationDisplay.fillStyle(0xE0F6FF, 0.8);
    for (let i = 0; i < 5; i++) {
      const splashX = x - 15 + Math.random() * 30;
      const splashY = y - 12 + Math.random() * 8;
      this.illustrationDisplay.fillCircle(splashX, splashY, 1 + Math.random() * 2);
    }
    
    // 階段
    this.illustrationDisplay.fillStyle(0xB0C4DE);
    this.illustrationDisplay.fillRect(x - 18, y + 5, 8, 3);
    this.illustrationDisplay.fillRect(x - 18, y + 8, 8, 3);
    this.illustrationDisplay.fillRect(x - 18, y + 11, 8, 3);
  }

  private drawPen(x: number, y: number): void {
    // ペン（詳細版）
    
    // ペンの本体
    this.illustrationDisplay.fillStyle(0x4169E1);
    this.illustrationDisplay.fillRoundedRect(x - 2, y - 20, 4, 35, 2);
    
    // ペンのクリップ
    this.illustrationDisplay.fillStyle(0xC0C0C0);
    this.illustrationDisplay.fillRect(x + 2, y - 15, 1, 8);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.arc(x + 2.5, y - 15, 2, Math.PI, 0);
    this.illustrationDisplay.fillPath();
    
    // ペン先
    this.illustrationDisplay.fillStyle(0x2F4F4F);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x - 1, y + 15);
    this.illustrationDisplay.lineTo(x + 1, y + 15);
    this.illustrationDisplay.lineTo(x, y + 20);
    this.illustrationDisplay.closePath();
    this.illustrationDisplay.fillPath();
    
    // ペン先の金属部分
    this.illustrationDisplay.fillStyle(0xC0C0C0);
    this.illustrationDisplay.fillRect(x - 1.5, y + 12, 3, 3);
    
    // ペンのキャップ部分
    this.illustrationDisplay.fillStyle(0x1E40AF);
    this.illustrationDisplay.fillRect(x - 2, y - 20, 4, 5);
    
    // ペンのグリップ部分
    this.illustrationDisplay.fillStyle(0x6495ED);
    this.illustrationDisplay.fillRect(x - 2, y + 5, 4, 8);
    
    // グリップの滑り止め
    this.illustrationDisplay.lineStyle(1, 0x4169E1);
    for (let i = 0; i < 4; i++) {
      this.illustrationDisplay.lineBetween(x - 2, y + 6 + i * 2, x + 2, y + 6 + i * 2);
    }
    
    // ペンの文字
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillRect(x - 1, y - 5, 2, 1);
    this.illustrationDisplay.fillRect(x - 1, y - 2, 2, 1);
    this.illustrationDisplay.fillRect(x - 1, y + 1, 2, 1);
    
    // 光沢
    this.illustrationDisplay.fillStyle(0xFFFFFF, 0.4);
    this.illustrationDisplay.fillRect(x - 1.5, y - 18, 1, 30);
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.2);
    this.illustrationDisplay.fillEllipse(x + 1, y + 22, 6, 2);
  }

  private drawPocket(x: number, y: number): void {
    // ポケット（詳細版）
    
    // ポケットの本体（ジーンズポケット）
    this.illustrationDisplay.fillStyle(0x4682B4);
    this.illustrationDisplay.fillRoundedRect(x - 12, y - 15, 24, 30, 5);
    
    // ポケットの縁取り
    this.illustrationDisplay.lineStyle(2, 0x2F4F4F);
    this.illustrationDisplay.strokeRoundedRect(x - 12, y - 15, 24, 30, 5);
    
    // ポケットの開口部
    this.illustrationDisplay.fillStyle(0x191970);
    this.illustrationDisplay.fillRoundedRect(x - 10, y - 15, 20, 5, 3);
    
    // ステッチ
    this.illustrationDisplay.lineStyle(1, 0xFFD700);
    // 外周ステッチ
    this.illustrationDisplay.strokeRoundedRect(x - 11, y - 14, 22, 28, 4);
    // 内側ステッチ
    this.illustrationDisplay.strokeRoundedRect(x - 9, y - 13, 18, 26, 3);
    
    // リベット（金属の留め具）
    this.illustrationDisplay.fillStyle(0xC0C0C0);
    this.illustrationDisplay.fillCircle(x - 8, y - 12, 1);
    this.illustrationDisplay.fillCircle(x + 8, y - 12, 1);
    
    // ポケットから出ているアイテム
    // スマートフォン
    this.illustrationDisplay.fillStyle(0x000000);
    this.illustrationDisplay.fillRoundedRect(x - 6, y - 18, 8, 12, 2);
    this.illustrationDisplay.fillStyle(0x1E90FF);
    this.illustrationDisplay.fillRoundedRect(x - 5, y - 17, 6, 8, 1);
    
    // ペン
    this.illustrationDisplay.fillStyle(0xFF0000);
    this.illustrationDisplay.fillRect(x + 3, y - 12, 2, 10);
    this.illustrationDisplay.fillStyle(0xC0C0C0);
    this.illustrationDisplay.fillRect(x + 3, y - 2, 2, 2);
    
    // ポケットの影
    this.illustrationDisplay.fillStyle(0x000000, 0.3);
    this.illustrationDisplay.fillRoundedRect(x - 8, y - 5, 16, 15, 3);
    
    // デニムの質感
    this.illustrationDisplay.lineStyle(1, 0x6495ED, 0.3);
    for (let i = 0; i < 8; i++) {
      this.illustrationDisplay.lineBetween(x - 10 + i * 3, y - 12, x - 8 + i * 3, y + 12);
    }
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.2);
    this.illustrationDisplay.fillEllipse(x, y + 18, 20, 4);
  }

  private drawMouse(x: number, y: number): void {
    // マウス（コンピューターマウス）（詳細版）
    
    // マウス本体
    this.illustrationDisplay.fillStyle(0xD3D3D3);
    this.illustrationDisplay.fillEllipse(x, y, 20, 28);
    
    // マウスの輪郭
    this.illustrationDisplay.lineStyle(2, 0xA9A9A9);
    this.illustrationDisplay.strokeEllipse(x, y, 20, 28);
    
    // 左クリックボタン
    this.illustrationDisplay.fillStyle(0xE0E0E0);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.arc(x, y - 8, 8, Math.PI, 0);
    this.illustrationDisplay.lineTo(x - 1, y - 8);
    this.illustrationDisplay.lineTo(x - 8, y - 8);
    this.illustrationDisplay.closePath();
    this.illustrationDisplay.fillPath();
    
    // 右クリックボタン
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.arc(x, y - 8, 8, Math.PI, 0);
    this.illustrationDisplay.lineTo(x + 8, y - 8);
    this.illustrationDisplay.lineTo(x + 1, y - 8);
    this.illustrationDisplay.closePath();
    this.illustrationDisplay.fillPath();
    
    // ボタンの境界線
    this.illustrationDisplay.lineStyle(1, 0xB0B0B0);
    this.illustrationDisplay.lineBetween(x, y - 16, x, y);
    
    // スクロールホイール
    this.illustrationDisplay.fillStyle(0x808080);
    this.illustrationDisplay.fillEllipse(x, y - 8, 3, 6);
    this.illustrationDisplay.lineStyle(1, 0x696969);
    this.illustrationDisplay.strokeEllipse(x, y - 8, 3, 6);
    
    // ホイールの溝
    this.illustrationDisplay.lineStyle(1, 0x555555);
    for (let i = 0; i < 4; i++) {
      this.illustrationDisplay.lineBetween(x - 1, y - 11 + i * 1.5, x + 1, y - 11 + i * 1.5);
    }
    
    // 光学センサー（底面）
    this.illustrationDisplay.fillStyle(0xFF0000, 0.6);
    this.illustrationDisplay.fillCircle(x, y + 8, 3);
    
    // ケーブル
    this.illustrationDisplay.lineStyle(4, 0x000000);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x, y + 14);
    this.illustrationDisplay.quadraticCurveTo(x + 15, y + 20, x + 25, y + 10);
    this.illustrationDisplay.strokePath();
    
    // ブランドロゴエリア
    this.illustrationDisplay.fillStyle(0xFFFFFF, 0.7);
    this.illustrationDisplay.fillEllipse(x, y + 3, 8, 4);
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.2);
    this.illustrationDisplay.fillEllipse(x, y + 16, 18, 4);
  }

  private drawMilk(x: number, y: number): void {
    // ミルク（牛乳パック）（詳細版）
    
    // 牛乳パック本体
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillRect(x - 10, y - 15, 20, 30);
    
    // パックの輪郭
    this.illustrationDisplay.lineStyle(2, 0xE0E0E0);
    this.illustrationDisplay.strokeRect(x - 10, y - 15, 20, 30);
    
    // パックの上部（三角屋根）
    this.illustrationDisplay.fillStyle(0xF5F5F5);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x - 10, y - 15);
    this.illustrationDisplay.lineTo(x, y - 25);
    this.illustrationDisplay.lineTo(x + 10, y - 15);
    this.illustrationDisplay.closePath();
    this.illustrationDisplay.fillPath();
    this.illustrationDisplay.strokePath();
    
    // 注ぎ口
    this.illustrationDisplay.fillStyle(0xE0E0E0);
    this.illustrationDisplay.fillRect(x - 2, y - 28, 4, 3);
    
    // ブランドラベル
    this.illustrationDisplay.fillStyle(0x4169E1);
    this.illustrationDisplay.fillRect(x - 8, y - 10, 16, 8);
    
    // ラベルの文字（MILK）
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillRect(x - 6, y - 8, 2, 4);
    this.illustrationDisplay.fillRect(x - 3, y - 8, 2, 4);
    this.illustrationDisplay.fillRect(x, y - 8, 2, 4);
    this.illustrationDisplay.fillRect(x + 3, y - 8, 2, 4);
    
    // 牛のイラスト
    this.illustrationDisplay.fillStyle(0x000000);
    this.illustrationDisplay.fillCircle(x - 5, y + 2, 3);
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillCircle(x - 5, y + 2, 2);
    this.illustrationDisplay.fillStyle(0x000000);
    this.illustrationDisplay.fillCircle(x - 6, y + 1, 1);
    this.illustrationDisplay.fillCircle(x - 4, y + 1, 1);
    
    // 牛の斑点
    this.illustrationDisplay.fillStyle(0x000000);
    this.illustrationDisplay.fillEllipse(x - 4, y + 5, 2, 3);
    this.illustrationDisplay.fillEllipse(x + 2, y + 3, 3, 2);
    this.illustrationDisplay.fillEllipse(x + 4, y + 8, 2, 2);
    
    // 栄養成分表示
    this.illustrationDisplay.fillStyle(0xF0F0F0);
    this.illustrationDisplay.fillRect(x + 2, y + 5, 6, 8);
    this.illustrationDisplay.lineStyle(1, 0xD0D0D0);
    this.illustrationDisplay.strokeRect(x + 2, y + 5, 6, 8);
    
    // 成分表の線
    this.illustrationDisplay.lineStyle(1, 0xCCCCCC);
    for (let i = 0; i < 4; i++) {
      this.illustrationDisplay.lineBetween(x + 3, y + 6 + i * 2, x + 7, y + 6 + i * 2);
    }
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.2);
    this.illustrationDisplay.fillRect(x - 8, y + 17, 18, 3);
  }

  private drawMovie(x: number, y: number): void {
    // ムービー（映画フィルム）（詳細版）
    
    // フィルムストリップ
    this.illustrationDisplay.fillStyle(0x2F2F2F);
    this.illustrationDisplay.fillRect(x - 18, y - 12, 36, 24);
    
    // フィルムの穴（パーフォレーション）
    this.illustrationDisplay.fillStyle(0x000000);
    for (let i = 0; i < 6; i++) {
      // 上側の穴
      this.illustrationDisplay.fillRect(x - 16 + i * 6, y - 11, 2, 2);
      // 下側の穴
      this.illustrationDisplay.fillRect(x - 16 + i * 6, y + 9, 2, 2);
    }
    
    // フィルムフレーム
    this.illustrationDisplay.fillStyle(0x1C1C1C);
    this.illustrationDisplay.fillRect(x - 14, y - 8, 8, 16);
    this.illustrationDisplay.fillRect(x - 2, y - 8, 8, 16);
    this.illustrationDisplay.fillRect(x + 10, y - 8, 8, 16);
    
    // フレーム内の画像
    // フレーム1（人物）
    this.illustrationDisplay.fillStyle(0xFFDBB3);
    this.illustrationDisplay.fillCircle(x - 10, y - 3, 2);
    this.illustrationDisplay.fillStyle(0x8B4513);
    this.illustrationDisplay.fillRect(x - 12, y - 1, 4, 6);
    
    // フレーム2（風景）
    this.illustrationDisplay.fillStyle(0x87CEEB);
    this.illustrationDisplay.fillRect(x + 2, y - 8, 8, 6);
    this.illustrationDisplay.fillStyle(0x32CD32);
    this.illustrationDisplay.fillRect(x + 2, y - 2, 8, 10);
    this.illustrationDisplay.fillStyle(0xFFD700);
    this.illustrationDisplay.fillCircle(x + 8, y - 5, 2);
    
    // フレーム3（車）
    this.illustrationDisplay.fillStyle(0xFF0000);
    this.illustrationDisplay.fillRect(x + 12, y, 4, 3);
    this.illustrationDisplay.fillStyle(0x000000);
    this.illustrationDisplay.fillCircle(x + 13, y + 3, 1);
    this.illustrationDisplay.fillCircle(x + 15, y + 3, 1);
    
    // フィルム番号
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillRect(x - 13, y + 6, 1, 2);
    this.illustrationDisplay.fillRect(x - 11, y + 6, 1, 2);
    this.illustrationDisplay.fillRect(x - 9, y + 6, 1, 2);
    
    // 映画会社のロゴ
    this.illustrationDisplay.fillStyle(0xFFD700);
    this.illustrationDisplay.fillCircle(x + 14, y - 6, 2);
    this.illustrationDisplay.fillStyle(0xFF8C00);
    this.illustrationDisplay.fillCircle(x + 14, y - 6, 1);
    
    // カチンコ
    this.illustrationDisplay.fillStyle(0x2F4F4F);
    this.illustrationDisplay.fillRect(x - 5, y - 20, 10, 4);
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillRect(x - 4, y - 19, 8, 2);
    
    // カチンコの文字
    this.illustrationDisplay.fillStyle(0x000000);
    this.illustrationDisplay.fillRect(x - 2, y - 18, 4, 1);
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.3);
    this.illustrationDisplay.fillRect(x - 16, y + 14, 32, 3);
  }

  private drawMelon(x: number, y: number): void {
    // メロン（詳細版）
    
    // メロン本体
    this.illustrationDisplay.fillStyle(0x90EE90);
    this.illustrationDisplay.fillEllipse(x, y, 20, 24);
    
    // メロンの網目模様
    this.illustrationDisplay.lineStyle(2, 0x228B22);
    // 縦の線
    for (let i = 0; i < 5; i++) {
      this.illustrationDisplay.beginPath();
      this.illustrationDisplay.arc(x, y, 10, Math.PI * (0.2 + i * 0.2), Math.PI * (0.8 + i * 0.2));
      this.illustrationDisplay.strokePath();
    }
    
    // 横の線
    for (let i = 0; i < 6; i++) {
      const yPos = y - 10 + i * 4;
      this.illustrationDisplay.strokeEllipse(x, yPos, 16 - Math.abs(yPos - y) * 0.5, 2);
    }
    
    // メロンの茎部分
    this.illustrationDisplay.fillStyle(0x8B4513);
    this.illustrationDisplay.fillRect(x - 1, y - 15, 2, 5);
    
    // 茎の先端
    this.illustrationDisplay.fillStyle(0x654321);
    this.illustrationDisplay.fillCircle(x, y - 15, 2);
    
    // つる
    this.illustrationDisplay.lineStyle(3, 0x32CD32);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x + 2, y - 12);
    this.illustrationDisplay.quadraticCurveTo(x + 8, y - 15, x + 6, y - 8);
    this.illustrationDisplay.quadraticCurveTo(x + 10, y - 5, x + 12, y - 10);
    this.illustrationDisplay.strokePath();
    
    // 葉っぱ
    this.illustrationDisplay.fillStyle(0x228B22);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x + 8, y - 10);
    this.illustrationDisplay.quadraticCurveTo(x + 12, y - 8, x + 10, y - 5);
    this.illustrationDisplay.quadraticCurveTo(x + 8, y - 7, x + 8, y - 10);
    this.illustrationDisplay.fillPath();
    
    // 葉脈
    this.illustrationDisplay.lineStyle(1, 0x006400);
    this.illustrationDisplay.lineBetween(x + 8, y - 9, x + 10, y - 6);
    
    // 光沢
    this.illustrationDisplay.fillStyle(0xFFFFFF, 0.4);
    this.illustrationDisplay.fillEllipse(x - 5, y - 5, 4, 6);
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.2);
    this.illustrationDisplay.fillEllipse(x, y + 15, 18, 4);
  }

  private drawMonitor(x: number, y: number): void {
    // モニター（詳細版）
    
    // モニター画面
    this.illustrationDisplay.fillStyle(0x000000);
    this.illustrationDisplay.fillRoundedRect(x - 18, y - 12, 36, 24, 3);
    
    // 画面のベゼル
    this.illustrationDisplay.lineStyle(3, 0x2F2F2F);
    this.illustrationDisplay.strokeRoundedRect(x - 18, y - 12, 36, 24, 3);
    
    // 画面表示
    this.illustrationDisplay.fillStyle(0x0040FF);
    this.illustrationDisplay.fillRoundedRect(x - 15, y - 9, 30, 18, 2);
    
    // デスクトップアイコン
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillRect(x - 12, y - 6, 4, 4);
    this.illustrationDisplay.fillRect(x - 6, y - 6, 4, 4);
    this.illustrationDisplay.fillRect(x, y - 6, 4, 4);
    this.illustrationDisplay.fillRect(x - 12, y, 4, 4);
    
    // タスクバー
    this.illustrationDisplay.fillStyle(0x4169E1);
    this.illustrationDisplay.fillRect(x - 15, y + 6, 30, 3);
    
    // スタートボタン
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillRect(x - 14, y + 6.5, 4, 2);
    
    // モニタースタンド
    this.illustrationDisplay.fillStyle(0x696969);
    this.illustrationDisplay.fillRect(x - 3, y + 12, 6, 6);
    
    // スタンドの台座
    this.illustrationDisplay.fillStyle(0x808080);
    this.illustrationDisplay.fillEllipse(x, y + 20, 16, 4);
    
    // 電源ボタン
    this.illustrationDisplay.fillStyle(0x32CD32);
    this.illustrationDisplay.fillCircle(x + 14, y - 10, 2);
    this.illustrationDisplay.fillStyle(0x00FF00);
    this.illustrationDisplay.fillCircle(x + 14, y - 10, 1);
    
    // ケーブル
    this.illustrationDisplay.lineStyle(3, 0x000000);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x + 5, y + 18);
    this.illustrationDisplay.quadraticCurveTo(x + 15, y + 22, x + 20, y + 15);
    this.illustrationDisplay.strokePath();
    
    // 反射
    this.illustrationDisplay.fillStyle(0xFFFFFF, 0.2);
    this.illustrationDisplay.fillRoundedRect(x - 16, y - 10, 8, 20, 2);
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.2);
    this.illustrationDisplay.fillEllipse(x, y + 24, 20, 3);
  }

  private drawYogurt(x: number, y: number): void {
    // ヨーグルト（詳細版）
    
    // ヨーグルトカップ
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillEllipse(x, y, 18, 24);
    
    // カップの輪郭
    this.illustrationDisplay.lineStyle(2, 0xE0E0E0);
    this.illustrationDisplay.strokeEllipse(x, y, 18, 24);
    
    // ラベル
    this.illustrationDisplay.fillStyle(0xFF69B4);
    this.illustrationDisplay.fillRect(x - 15, y - 8, 30, 12);
    
    // ラベルの文字
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillRect(x - 8, y - 6, 2, 3);
    this.illustrationDisplay.fillRect(x - 5, y - 6, 2, 3);
    this.illustrationDisplay.fillRect(x - 2, y - 6, 2, 3);
    this.illustrationDisplay.fillRect(x + 1, y - 6, 2, 3);
    this.illustrationDisplay.fillRect(x + 4, y - 6, 2, 3);
    
    // フルーツのイラスト
    this.illustrationDisplay.fillStyle(0xFF6347);
    this.illustrationDisplay.fillCircle(x - 8, y + 2, 3);
    this.illustrationDisplay.fillStyle(0x32CD32);
    this.illustrationDisplay.fillCircle(x - 8, y - 1, 1);
    
    this.illustrationDisplay.fillStyle(0x9370DB);
    this.illustrationDisplay.fillCircle(x, y + 3, 2);
    this.illustrationDisplay.fillCircle(x + 3, y + 4, 2);
    this.illustrationDisplay.fillCircle(x - 3, y + 5, 2);
    
    // カップの蓋
    this.illustrationDisplay.fillStyle(0xC0C0C0);
    this.illustrationDisplay.fillEllipse(x, y - 12, 20, 4);
    this.illustrationDisplay.lineStyle(1, 0xA0A0A0);
    this.illustrationDisplay.strokeEllipse(x, y - 12, 20, 4);
    
    // 蓋のつまみ
    this.illustrationDisplay.fillStyle(0x808080);
    this.illustrationDisplay.fillRect(x - 2, y - 14, 4, 2);
    
    // 栄養表示
    this.illustrationDisplay.fillStyle(0xF0F0F0);
    this.illustrationDisplay.fillRect(x + 8, y + 5, 6, 8);
    this.illustrationDisplay.lineStyle(1, 0xD0D0D0);
    this.illustrationDisplay.strokeRect(x + 8, y + 5, 6, 8);
    
    // 賞味期限
    this.illustrationDisplay.fillStyle(0x000000);
    this.illustrationDisplay.fillRect(x + 9, y + 7, 4, 1);
    this.illustrationDisplay.fillRect(x + 9, y + 9, 3, 1);
    this.illustrationDisplay.fillRect(x + 9, y + 11, 4, 1);
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.2);
    this.illustrationDisplay.fillEllipse(x, y + 15, 16, 3);
  }

  private drawUniform(x: number, y: number): void {
    // ユニフォーム（スポーツユニフォーム）（詳細版）
    
    // ユニフォーム本体
    this.illustrationDisplay.fillStyle(0x4169E1);
    this.illustrationDisplay.fillRoundedRect(x - 12, y - 15, 24, 30, 3);
    
    // 襟
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x - 8, y - 15);
    this.illustrationDisplay.lineTo(x - 4, y - 10);
    this.illustrationDisplay.lineTo(x, y - 12);
    this.illustrationDisplay.lineTo(x + 4, y - 10);
    this.illustrationDisplay.lineTo(x + 8, y - 15);
    this.illustrationDisplay.lineTo(x + 8, y - 13);
    this.illustrationDisplay.lineTo(x - 8, y - 13);
    this.illustrationDisplay.closePath();
    this.illustrationDisplay.fillPath();
    
    // 袖
    this.illustrationDisplay.fillStyle(0x4169E1);
    this.illustrationDisplay.fillEllipse(x - 18, y - 8, 8, 16);
    this.illustrationDisplay.fillEllipse(x + 18, y - 8, 8, 16);
    
    // 袖の縁取り
    this.illustrationDisplay.lineStyle(2, 0xFFFFFF);
    this.illustrationDisplay.strokeEllipse(x - 18, y - 8, 8, 16);
    this.illustrationDisplay.strokeEllipse(x + 18, y - 8, 8, 16);
    
    // 背番号
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillRect(x - 4, y - 5, 8, 12);
    this.illustrationDisplay.fillStyle(0x4169E1);
    this.illustrationDisplay.fillRect(x - 3, y - 4, 6, 10);
    
    // 番号10
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillRect(x - 2, y - 3, 1, 8);
    this.illustrationDisplay.fillRect(x - 1, y - 3, 2, 1);
    this.illustrationDisplay.fillRect(x - 1, y + 4, 2, 1);
    this.illustrationDisplay.fillRect(x + 1, y - 3, 1, 8);
    this.illustrationDisplay.fillRect(x + 2, y - 3, 1, 8);
    
    // チームロゴ
    this.illustrationDisplay.fillStyle(0xFFD700);
    this.illustrationDisplay.fillCircle(x - 6, y - 8, 3);
    this.illustrationDisplay.fillStyle(0xFF8C00);
    this.illustrationDisplay.fillCircle(x - 6, y - 8, 2);
    
    // スポンサーロゴ
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillRect(x + 4, y - 8, 6, 2);
    this.illustrationDisplay.fillStyle(0x000000);
    this.illustrationDisplay.fillRect(x + 5, y - 7.5, 4, 1);
    
    // 縫い目
    this.illustrationDisplay.lineStyle(1, 0x1E40AF);
    this.illustrationDisplay.lineBetween(x - 10, y - 13, x - 10, y + 13);
    this.illustrationDisplay.lineBetween(x + 10, y - 13, x + 10, y + 13);
    
    // パンツ
    this.illustrationDisplay.fillStyle(0x4169E1);
    this.illustrationDisplay.fillRect(x - 10, y + 15, 20, 12);
    
    // パンツのサイドライン
    this.illustrationDisplay.lineStyle(3, 0xFFFFFF);
    this.illustrationDisplay.lineBetween(x - 8, y + 15, x - 8, y + 27);
    this.illustrationDisplay.lineBetween(x + 8, y + 15, x + 8, y + 27);
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.2);
    this.illustrationDisplay.fillEllipse(x, y + 30, 20, 4);
  }

  private drawLight(x: number, y: number): void {
    // ライト（電球）（詳細版）
    
    // 電球の本体
    this.illustrationDisplay.fillStyle(0xFFFFE0);
    this.illustrationDisplay.fillCircle(x, y - 5, 12);
    
    // 電球の下部（ねじ部分）
    this.illustrationDisplay.fillStyle(0xC0C0C0);
    this.illustrationDisplay.fillRect(x - 6, y + 7, 12, 8);
    
    // ねじ山
    this.illustrationDisplay.lineStyle(1, 0xA0A0A0);
    for (let i = 0; i < 4; i++) {
      this.illustrationDisplay.lineBetween(x - 6, y + 8 + i * 2, x + 6, y + 8 + i * 2);
    }
    
    // フィラメント
    this.illustrationDisplay.lineStyle(2, 0xFF8C00);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x - 4, y - 10);
    this.illustrationDisplay.quadraticCurveTo(x, y - 5, x + 4, y - 10);
    this.illustrationDisplay.strokePath();
    
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x - 3, y - 3);
    this.illustrationDisplay.quadraticCurveTo(x, y + 1, x + 3, y - 3);
    this.illustrationDisplay.strokePath();
    
    // 支柱
    this.illustrationDisplay.lineStyle(2, 0x696969);
    this.illustrationDisplay.lineBetween(x - 2, y - 12, x - 2, y + 5);
    this.illustrationDisplay.lineBetween(x + 2, y - 12, x + 2, y + 5);
    
    // 光の輝き
    this.illustrationDisplay.fillStyle(0xFFFFFF, 0.8);
    this.illustrationDisplay.fillCircle(x - 4, y - 8, 3);
    this.illustrationDisplay.fillCircle(x + 3, y - 6, 2);
    
    // 光線
    this.illustrationDisplay.lineStyle(3, 0xFFFF99, 0.6);
    for (let i = 0; i < 8; i++) {
      const angle = (Math.PI * 2 * i) / 8;
      const startX = x + Math.cos(angle) * 15;
      const startY = y - 5 + Math.sin(angle) * 15;
      const endX = x + Math.cos(angle) * 20;
      const endY = y - 5 + Math.sin(angle) * 20;
      this.illustrationDisplay.lineBetween(startX, startY, endX, endY);
    }
    
    // ソケット
    this.illustrationDisplay.fillStyle(0x2F4F4F);
    this.illustrationDisplay.fillRect(x - 8, y + 15, 16, 6);
    this.illustrationDisplay.lineStyle(1, 0x1C1C1C);
    this.illustrationDisplay.strokeRect(x - 8, y + 15, 16, 6);
    
    // 電源コード
    this.illustrationDisplay.lineStyle(4, 0x000000);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x + 8, y + 18);
    this.illustrationDisplay.quadraticCurveTo(x + 15, y + 25, x + 20, y + 15);
    this.illustrationDisplay.strokePath();
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.2);
    this.illustrationDisplay.fillEllipse(x, y + 23, 14, 3);
  }

  private drawRemote(x: number, y: number): void {
    // リモコン（詳細版）
    
    // リモコン本体
    this.illustrationDisplay.fillStyle(0x2F2F2F);
    this.illustrationDisplay.fillRoundedRect(x - 8, y - 18, 16, 36, 4);
    
    // 本体の輪郭
    this.illustrationDisplay.lineStyle(2, 0x1C1C1C);
    this.illustrationDisplay.strokeRoundedRect(x - 8, y - 18, 16, 36, 4);
    
    // 画面表示部
    this.illustrationDisplay.fillStyle(0x000000);
    this.illustrationDisplay.fillRect(x - 6, y - 15, 12, 4);
    this.illustrationDisplay.fillStyle(0x00FF00);
    this.illustrationDisplay.fillRect(x - 5, y - 14, 10, 2);
    
    // 電源ボタン
    this.illustrationDisplay.fillStyle(0xFF0000);
    this.illustrationDisplay.fillCircle(x, y - 8, 3);
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillCircle(x, y - 8, 2);
    
    // 数字ボタン（3x4グリッド）
    this.illustrationDisplay.fillStyle(0x696969);
    for (let row = 0; row < 4; row++) {
      for (let col = 0; col < 3; col++) {
        const btnX = x - 4 + col * 4;
        const btnY = y - 2 + row * 4;
        this.illustrationDisplay.fillRoundedRect(btnX - 1, btnY - 1, 2, 2, 1);
      }
    }
    
    // 特別ボタン（音量、チャンネル）
    this.illustrationDisplay.fillStyle(0x4169E1);
    this.illustrationDisplay.fillRect(x - 6, y + 12, 3, 2);
    this.illustrationDisplay.fillRect(x + 3, y + 12, 3, 2);
    
    // ボタンラベル（VOL、CH）
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillRect(x - 5, y + 12.5, 1, 1);
    this.illustrationDisplay.fillRect(x + 4, y + 12.5, 1, 1);
    
    // 方向キー
    this.illustrationDisplay.fillStyle(0x808080);
    this.illustrationDisplay.fillCircle(x, y + 5, 4);
    this.illustrationDisplay.fillStyle(0xA0A0A0);
    this.illustrationDisplay.fillCircle(x, y + 5, 3);
    
    // 方向キーの矢印
    this.illustrationDisplay.fillStyle(0x2F2F2F);
    // 上
    this.illustrationDisplay.fillTriangle(x - 1, y + 3, x + 1, y + 3, x, y + 1);
    // 下
    this.illustrationDisplay.fillTriangle(x - 1, y + 7, x + 1, y + 7, x, y + 9);
    // 左
    this.illustrationDisplay.fillTriangle(x - 2, y + 4, x - 2, y + 6, x - 4, y + 5);
    // 右
    this.illustrationDisplay.fillTriangle(x + 2, y + 4, x + 2, y + 6, x + 4, y + 5);
    
    // 中央決定ボタン
    this.illustrationDisplay.fillStyle(0xFF8C00);
    this.illustrationDisplay.fillCircle(x, y + 5, 1);
    
    // ブランドロゴ
    this.illustrationDisplay.fillStyle(0xC0C0C0);
    this.illustrationDisplay.fillRect(x - 3, y + 15, 6, 2);
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.3);
    this.illustrationDisplay.fillEllipse(x, y + 20, 12, 3);
  }

  private drawRule(x: number, y: number): void {
    // ルール（定規）（詳細版）
    
    // 定規本体
    this.illustrationDisplay.fillStyle(0xF0F0F0);
    this.illustrationDisplay.fillRect(x - 20, y - 3, 40, 6);
    
    // 定規の輪郭
    this.illustrationDisplay.lineStyle(2, 0xD0D0D0);
    this.illustrationDisplay.strokeRect(x - 20, y - 3, 40, 6);
    
    // 目盛り（cm）
    this.illustrationDisplay.lineStyle(1, 0x000000);
    for (let i = 0; i <= 10; i++) {
      const markX = x - 20 + i * 4;
      const markHeight = i % 5 === 0 ? 4 : 2; // 5cm間隔で長い目盛り
      this.illustrationDisplay.lineBetween(markX, y - 3, markX, y - 3 + markHeight);
      
      // 数字表示（5cm間隔）
      if (i % 5 === 0 && i > 0) {
        this.illustrationDisplay.fillStyle(0x000000);
        if (i === 5) {
          this.illustrationDisplay.fillRect(markX - 1, y - 1, 2, 1);
        } else if (i === 10) {
          this.illustrationDisplay.fillRect(markX - 2, y - 1, 1, 1);
          this.illustrationDisplay.fillRect(markX, y - 1, 1, 1);
        }
      }
    }
    
    // mm目盛り
    this.illustrationDisplay.lineStyle(1, 0x666666);
    for (let i = 0; i < 100; i++) {
      if (i % 10 !== 0) { // cm目盛りと重複しない
        const markX = x - 20 + i * 0.4;
        const markHeight = i % 5 === 0 ? 1.5 : 1;
        this.illustrationDisplay.lineBetween(markX, y + 3, markX, y + 3 - markHeight);
      }
    }
    
    // ブランド名
    this.illustrationDisplay.fillStyle(0x4169E1);
    this.illustrationDisplay.fillRect(x - 15, y + 1, 8, 1);
    
    // 材質表示（STEEL）
    this.illustrationDisplay.fillStyle(0x696969);
    this.illustrationDisplay.fillRect(x + 10, y + 1, 6, 1);
    
    // 金属部分（端っこ）
    this.illustrationDisplay.fillStyle(0xC0C0C0);
    this.illustrationDisplay.fillRect(x - 22, y - 4, 2, 8);
    this.illustrationDisplay.fillRect(x + 20, y - 4, 2, 8);
    
    // 定規の穴
    this.illustrationDisplay.fillStyle(0xD0D0D0);
    this.illustrationDisplay.fillCircle(x + 15, y, 2);
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillCircle(x + 15, y, 1);
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.2);
    this.illustrationDisplay.fillRect(x - 18, y + 5, 36, 2);
  }

  private drawLemon(x: number, y: number): void {
    // レモン（詳細版）
    
    // レモン本体
    this.illustrationDisplay.fillStyle(0xFFFF00);
    this.illustrationDisplay.fillEllipse(x, y, 14, 20);
    
    // レモンの質感（凹凸）
    this.illustrationDisplay.fillStyle(0xFFF8DC, 0.6);
    for (let i = 0; i < 20; i++) {
      const dotX = x - 6 + Math.random() * 12;
      const dotY = y - 8 + Math.random() * 16;
      this.illustrationDisplay.fillCircle(dotX, dotY, 1);
    }
    
    // レモンの先端部分
    this.illustrationDisplay.fillStyle(0xF0E68C);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x, y - 10);
    this.illustrationDisplay.lineTo(x - 2, y - 8);
    this.illustrationDisplay.lineTo(x + 2, y - 8);
    this.illustrationDisplay.closePath();
    this.illustrationDisplay.fillPath();
    
    // へた（緑の部分）
    this.illustrationDisplay.fillStyle(0x32CD32);
    this.illustrationDisplay.fillCircle(x, y - 10, 2);
    
    // 葉っぱ
    this.illustrationDisplay.fillStyle(0x228B22);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x - 2, y - 12);
    this.illustrationDisplay.quadraticCurveTo(x - 5, y - 15, x - 3, y - 18);
    this.illustrationDisplay.quadraticCurveTo(x - 1, y - 16, x - 2, y - 12);
    this.illustrationDisplay.fillPath();
    
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x + 2, y - 12);
    this.illustrationDisplay.quadraticCurveTo(x + 5, y - 15, x + 3, y - 18);
    this.illustrationDisplay.quadraticCurveTo(x + 1, y - 16, x + 2, y - 12);
    this.illustrationDisplay.fillPath();
    
    // 葉脈
    this.illustrationDisplay.lineStyle(1, 0x006400);
    this.illustrationDisplay.lineBetween(x - 2, y - 13, x - 3, y - 16);
    this.illustrationDisplay.lineBetween(x + 2, y - 13, x + 3, y - 16);
    
    // レモンのハイライト
    this.illustrationDisplay.fillStyle(0xFFFFFF, 0.6);
    this.illustrationDisplay.fillEllipse(x - 3, y - 3, 3, 5);
    
    // レモンの影（自然な陰影）
    this.illustrationDisplay.fillStyle(0xF0E68C, 0.8);
    this.illustrationDisplay.fillEllipse(x + 3, y + 2, 4, 8);
    
    // 下部の丸み
    this.illustrationDisplay.fillStyle(0xF5F5DC);
    this.illustrationDisplay.fillEllipse(x, y + 8, 10, 4);
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.2);
    this.illustrationDisplay.fillEllipse(x, y + 12, 12, 3);
  }

  private drawRobot(x: number, y: number): void {
    // ロボット（詳細版）
    
    // ロボットの頭部
    this.illustrationDisplay.fillStyle(0xC0C0C0);
    this.illustrationDisplay.fillRoundedRect(x - 8, y - 18, 16, 12, 3);
    
    // 頭部の輪郭
    this.illustrationDisplay.lineStyle(2, 0x808080);
    this.illustrationDisplay.strokeRoundedRect(x - 8, y - 18, 16, 12, 3);
    
    // 目
    this.illustrationDisplay.fillStyle(0x00FF00);
    this.illustrationDisplay.fillCircle(x - 4, y - 14, 2);
    this.illustrationDisplay.fillCircle(x + 4, y - 14, 2);
    this.illustrationDisplay.fillStyle(0x000000);
    this.illustrationDisplay.fillCircle(x - 4, y - 14, 1);
    this.illustrationDisplay.fillCircle(x + 4, y - 14, 1);
    
    // アンテナ
    this.illustrationDisplay.lineStyle(3, 0x696969);
    this.illustrationDisplay.lineBetween(x - 3, y - 18, x - 3, y - 22);
    this.illustrationDisplay.lineBetween(x + 3, y - 18, x + 3, y - 22);
    this.illustrationDisplay.fillStyle(0xFF0000);
    this.illustrationDisplay.fillCircle(x - 3, y - 22, 2);
    this.illustrationDisplay.fillCircle(x + 3, y - 22, 2);
    
    // 口（スピーカー）
    this.illustrationDisplay.fillStyle(0x2F2F2F);
    this.illustrationDisplay.fillRect(x - 4, y - 10, 8, 2);
    this.illustrationDisplay.lineStyle(1, 0x000000);
    for (let i = 0; i < 6; i++) {
      this.illustrationDisplay.lineBetween(x - 3 + i, y - 10, x - 3 + i, y - 8);
    }
    
    // 胴体
    this.illustrationDisplay.fillStyle(0xD3D3D3);
    this.illustrationDisplay.fillRoundedRect(x - 10, y - 6, 20, 16, 2);
    this.illustrationDisplay.lineStyle(2, 0xA9A9A9);
    this.illustrationDisplay.strokeRoundedRect(x - 10, y - 6, 20, 16, 2);
    
    // 胸部パネル
    this.illustrationDisplay.fillStyle(0x4169E1);
    this.illustrationDisplay.fillRect(x - 6, y - 4, 12, 8);
    
    // パネルのボタン
    this.illustrationDisplay.fillStyle(0xFF0000);
    this.illustrationDisplay.fillCircle(x - 3, y - 1, 1);
    this.illustrationDisplay.fillStyle(0x00FF00);
    this.illustrationDisplay.fillCircle(x, y - 1, 1);
    this.illustrationDisplay.fillStyle(0xFFFF00);
    this.illustrationDisplay.fillCircle(x + 3, y - 1, 1);
    
    // 腕
    this.illustrationDisplay.fillStyle(0xC0C0C0);
    this.illustrationDisplay.fillRect(x - 16, y - 4, 6, 12);
    this.illustrationDisplay.fillRect(x + 10, y - 4, 6, 12);
    
    // 関節
    this.illustrationDisplay.fillStyle(0x696969);
    this.illustrationDisplay.fillCircle(x - 13, y + 2, 2);
    this.illustrationDisplay.fillCircle(x + 13, y + 2, 2);
    
    // 手
    this.illustrationDisplay.fillStyle(0xA9A9A9);
    this.illustrationDisplay.fillCircle(x - 13, y + 10, 3);
    this.illustrationDisplay.fillCircle(x + 13, y + 10, 3);
    
    // 脚
    this.illustrationDisplay.fillStyle(0xC0C0C0);
    this.illustrationDisplay.fillRect(x - 6, y + 10, 4, 12);
    this.illustrationDisplay.fillRect(x + 2, y + 10, 4, 12);
    
    // 足
    this.illustrationDisplay.fillStyle(0x808080);
    this.illustrationDisplay.fillEllipse(x - 4, y + 24, 6, 4);
    this.illustrationDisplay.fillEllipse(x + 4, y + 24, 6, 4);
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.2);
    this.illustrationDisplay.fillEllipse(x, y + 28, 20, 4);
  }

  private drawWine(x: number, y: number): void {
    // ワイン（ワインボトル）（詳細版）
    
    // ボトル本体
    this.illustrationDisplay.fillStyle(0x2F4F2F);
    this.illustrationDisplay.fillRect(x - 4, y - 5, 8, 20);
    
    // ボトルの輪郭
    this.illustrationDisplay.lineStyle(2, 0x1C3E1C);
    this.illustrationDisplay.strokeRect(x - 4, y - 5, 8, 20);
    
    // ボトルネック
    this.illustrationDisplay.fillStyle(0x2F4F2F);
    this.illustrationDisplay.fillRect(x - 2, y - 15, 4, 10);
    
    // コルク
    this.illustrationDisplay.fillStyle(0xD2691E);
    this.illustrationDisplay.fillRect(x - 2.5, y - 18, 5, 3);
    
    // コルクの質感
    this.illustrationDisplay.lineStyle(1, 0xA0522D);
    this.illustrationDisplay.lineBetween(x - 2, y - 17, x + 2, y - 17);
    this.illustrationDisplay.lineBetween(x - 2, y - 16, x + 2, y - 16);
    
    // ラベル
    this.illustrationDisplay.fillStyle(0xF5F5DC);
    this.illustrationDisplay.fillRect(x - 3, y - 2, 6, 8);
    
    // ラベルの装飾枠
    this.illustrationDisplay.lineStyle(1, 0x8B4513);
    this.illustrationDisplay.strokeRect(x - 3, y - 2, 6, 8);
    
    // ワインの名前（装飾的な文字）
    this.illustrationDisplay.fillStyle(0x8B0000);
    this.illustrationDisplay.fillRect(x - 2, y - 1, 4, 1);
    this.illustrationDisplay.fillRect(x - 1, y + 1, 2, 1);
    this.illustrationDisplay.fillRect(x - 2, y + 3, 4, 1);
    
    // ヴィンテージ年
    this.illustrationDisplay.fillStyle(0x000000);
    this.illustrationDisplay.fillRect(x - 1, y + 5, 2, 1);
    
    // ボトルの光沢
    this.illustrationDisplay.fillStyle(0xFFFFFF, 0.3);
    this.illustrationDisplay.fillRect(x - 3, y - 12, 1, 24);
    
    // ワインの液面
    this.illustrationDisplay.fillStyle(0x722F37);
    this.illustrationDisplay.fillRect(x - 3, y + 8, 6, 6);
    
    // ボトルの底部
    this.illustrationDisplay.fillStyle(0x1C3E1C);
    this.illustrationDisplay.fillEllipse(x, y + 17, 8, 3);
    
    // ワイングラス（横に配置）
    this.illustrationDisplay.fillStyle(0xFFFFFF, 0.8);
    this.illustrationDisplay.fillEllipse(x + 12, y + 5, 6, 8);
    this.illustrationDisplay.lineStyle(2, 0xE0E0E0);
    this.illustrationDisplay.strokeEllipse(x + 12, y + 5, 6, 8);
    
    // グラスの脚
    this.illustrationDisplay.lineStyle(3, 0xE0E0E0);
    this.illustrationDisplay.lineBetween(x + 12, y + 9, x + 12, y + 15);
    
    // グラスの台座
    this.illustrationDisplay.fillStyle(0xF0F0F0);
    this.illustrationDisplay.fillEllipse(x + 12, y + 15, 4, 2);
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.2);
    this.illustrationDisplay.fillEllipse(x, y + 20, 12, 3);
  }

  private drawDress(x: number, y: number): void {
    // ワンピース（ドレス）（詳細版）
    
    // ドレスの上部（胴体）
    this.illustrationDisplay.fillStyle(0xFF69B4);
    this.illustrationDisplay.fillRoundedRect(x - 8, y - 18, 16, 12, 3);
    
    // ドレスの下部（スカート）
    this.illustrationDisplay.fillStyle(0xFF1493);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x - 8, y - 6);
    this.illustrationDisplay.lineTo(x - 15, y + 15);
    this.illustrationDisplay.lineTo(x + 15, y + 15);
    this.illustrationDisplay.lineTo(x + 8, y - 6);
    this.illustrationDisplay.closePath();
    this.illustrationDisplay.fillPath();
    
    // 袖
    this.illustrationDisplay.fillStyle(0xFF69B4);
    this.illustrationDisplay.fillEllipse(x - 12, y - 12, 6, 8);
    this.illustrationDisplay.fillEllipse(x + 12, y - 12, 6, 8);
    
    // 襟
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.beginPath();
    this.illustrationDisplay.moveTo(x - 4, y - 18);
    this.illustrationDisplay.lineTo(x, y - 15);
    this.illustrationDisplay.lineTo(x + 4, y - 18);
    this.illustrationDisplay.lineTo(x + 4, y - 16);
    this.illustrationDisplay.lineTo(x - 4, y - 16);
    this.illustrationDisplay.closePath();
    this.illustrationDisplay.fillPath();
    
    // ボタン
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillCircle(x, y - 14, 1);
    this.illustrationDisplay.fillCircle(x, y - 11, 1);
    this.illustrationDisplay.fillCircle(x, y - 8, 1);
    
    // ベルト
    this.illustrationDisplay.fillStyle(0x8B4513);
    this.illustrationDisplay.fillRect(x - 8, y - 7, 16, 2);
    
    // ベルトのバックル
    this.illustrationDisplay.fillStyle(0xFFD700);
    this.illustrationDisplay.fillRect(x - 2, y - 7, 4, 2);
    this.illustrationDisplay.lineStyle(1, 0xFFA500);
    this.illustrationDisplay.strokeRect(x - 2, y - 7, 4, 2);
    
    // スカートの模様（花柄）
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    for (let i = 0; i < 8; i++) {
      const flowerX = x - 12 + (i % 4) * 6;
      const flowerY = y - 2 + Math.floor(i / 4) * 8;
      this.illustrationDisplay.fillCircle(flowerX, flowerY, 2);
      
      // 花の中心
      this.illustrationDisplay.fillStyle(0xFFD700);
      this.illustrationDisplay.fillCircle(flowerX, flowerY, 1);
      this.illustrationDisplay.fillStyle(0xFFFFFF);
    }
    
    // スカートの裾の装飾
    this.illustrationDisplay.fillStyle(0xFFFFFF);
    this.illustrationDisplay.fillRect(x - 14, y + 13, 28, 2);
    
    // レースの模様
    this.illustrationDisplay.lineStyle(1, 0xFF69B4);
    for (let i = 0; i < 14; i++) {
      this.illustrationDisplay.lineBetween(x - 13 + i * 2, y + 13, x - 12 + i * 2, y + 15);
    }
    
    // 影
    this.illustrationDisplay.fillStyle(0x000000, 0.2);
    this.illustrationDisplay.fillEllipse(x, y + 18, 20, 4);
  }
}

// ヘルパー関数
function getRowDisplayName(row: string): string {
  const names: { [key: string]: string } = {
    'a': 'ア行',
    'ka': 'カ行', 
    'sa': 'サ行',
    'ta': 'タ行',
    'na': 'ナ行',
    'ha': 'ハ行',
    'ma': 'マ行',
    'ya': 'ヤ行',
    'ra': 'ラ行',
    'wa': 'ワ行',
    'all': 'ぜんぶ'
  };
  return names[row] || 'カタカナ';
}